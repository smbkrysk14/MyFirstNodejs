{
  "source": "doc/api/http.markdown",
  "modules": [
    {
      "textRaw": "HTTP",
      "name": "http",
      "stability": 3,
      "stabilityText": "Stable",
      "desc": "<!--\nTo use the HTTP server and client one must `require('http')`.\n-->\n\n<p>HTTP サーバおよびクライアントを使用するにはいずれも <code>require(&#39;http&#39;)</code> が必要です。\n\n</p>\n<!--\nThe HTTP interfaces in Node are designed to support many features\nof the protocol which have been traditionally difficult to use.\nIn particular, large, possibly chunk-encoded, messages. The interface is\ncareful to never buffer entire requests or responses--the\nuser is able to stream data.\n-->\n\n<p>Node の HTTP インタフェースは、\n伝統的に扱いが難しかったプロトコルの多くの機能をサポートするように設計されています。\nとりわけ大きくて、場合によってはチャンク化されたメッセージです。\nインタフェースは決してリクエストまたはレスポンス全体をバッファリングしないように気をつけています\n－ 利用者はストリームデータを使うことができます。\n\n</p>\n<!--\nHTTP message headers are represented by an object like this:\n-->\n\n<p>HTTP メッセージヘッダはこのようなオブジェクトとして表現されます:\n\n</p>\n<pre><code>{ &#39;content-length&#39;: &#39;123&#39;,\n  &#39;content-type&#39;: &#39;text/plain&#39;,\n  &#39;connection&#39;: &#39;keep-alive&#39;,\n  &#39;accept&#39;: &#39;*/*&#39; }</code></pre>\n<!--\nKeys are lowercased. Values are not modified.\n-->\n\n<p>キーは小文字化されます。値は変更されません。\n\n</p>\n<!--\nIn order to support the full spectrum of possible HTTP applications, Node's\nHTTP API is very low-level. It deals with stream handling and message\nparsing only. It parses a message into headers and body but it does not\nparse the actual headers or the body.\n-->\n\n<p>考えられる HTTP アプリケーションを完全にサポートするために、\nNode の HTTP API はとても低水準です。それはストリームのハンドリングとメッセージの解析だけに対処します。\n解析はメッセージをヘッダとボディに分けますが、実際のヘッダとボディは解析しません。\n\n\n</p>\n",
      "properties": [
        {
          "textRaw": "`STATUS_CODES` {Object} ",
          "name": "STATUS_CODES",
          "A collection of all the standard HTTP response status codes, and the\nshort description of each.  For example, `http.STATUS_CODES[404]": "== 'Not\nFound'`.",
          "desc": "<p>全ての HTTP 標準ステータスコードと短い説明のコレクションです。\nたとえば、<code>http.STATUS_CODES[404] === &#39;Not Found&#39;</code>。\n\n</p>\n"
        },
        {
          "textRaw": "http.globalAgent",
          "name": "globalAgent",
          "desc": "<!--\nGlobal instance of Agent which is used as the default for all http client\nrequests.\n-->\n\n<p>全ての HTTP クライアントリクエストで使用される、デフォルトの Agent のインスタンスです。\n\n\n</p>\n"
        },
        {
          "textRaw": "http.IncomingMessage",
          "name": "IncomingMessage",
          "desc": "<!--\nAn `IncomingMessage` object is created by [http.Server][] or\n[http.ClientRequest][] and passed as the first argument to the `'request'`\nand `'response'` event respectively. It may be used to access response status,\nheaders and data.\n-->\n\n<p><code>IncomingMessage</code> オブジェクトは [http.Server][] または [http.ClientRequest][]\nによって作成され、<code>&#39;request&#39;</code> および <code>&#39;response&#39;</code> イベントそれぞれの\n最初の引数として渡されます。\nそれはステータス、ヘッダ、およびデータにアクセスするために使われます。\n\n</p>\n<!--\nIt implements the [Readable Stream][] interface, as well as the\nfollowing additional events, methods, and properties.\n-->\n\n<p>これは [Readable Stream][] インタフェースの実装で、\n以下のイベント、メソッド、およびプロパティを追加で持ちます。\n\n</p>\n",
          "events": [
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "desc": "<p><code>function () { }</code>\n\n</p>\n<!--\nIndicates that the underlaying connection was closed.\nJust like `'end'`, this event occurs only once per response.\n-->\n\n<p>下層の接続が切断されたことを示します。\n<code>&#39;end&#39;</code> と同様、このイベントはレスポンス毎に一度だけ生成されます。\n\n</p>\n<!--\nJust like `'end'`, this event occurs only once per response. See\n[http.ServerResponse][]'s `'close'` event for more information.\n-->\n\n<p><code>&#39;end&#39;</code> のように、このイベントはレスポンス毎に一回生成されます。\n[http.ServerResponse][] の <code>&#39;close&#39;</code> イベントにより多くの情報があります。\n\n</p>\n",
              "params": []
            }
          ],
          "properties": [
            {
              "textRaw": "message.httpVersion",
              "name": "httpVersion",
              "desc": "<!--\nIn case of server request, the HTTP version sent by the client. In the case of\nclient response, the HTTP version of the connected-to server.\nProbably either `'1.1'` or `'1.0'`.\n-->\n\n<p>サーバリクエストの場合、クライアントが送信した HTTP バージョンです。\nクライアントレスポンスの場合、接続したサーバの HTTP バージョンです。\nいずれの場合も <code>&#39;1.1&#39;</code> または <code>&#39;1.0&#39;</code> です。\n\n</p>\n<!--\nAlso `response.httpVersionMajor` is the first integer and\n`response.httpVersionMinor` is the second.\n-->\n\n<p>同様に <code>response.httpVersionMajor</code> は最初の整数、\n<code>response.httpVersionMinor</code> は 2 番目の整数です。\n\n\n</p>\n"
            },
            {
              "textRaw": "message.headers",
              "name": "headers",
              "desc": "<!--\nThe request/response headers object.\n-->\n\n<p>リクエスト／レスポンスヘッダオブジェクトです。\n\n</p>\n<!--\nRead only map of header names and values. Header names are lower-cased.\nExample:\n-->\n\n<p>ヘッダ名と値のリードオンリーなマップです。ヘッダ名は小文字です。\n例:\n\n</p>\n<pre><code>// Prints something like:\n//\n// { &#39;user-agent&#39;: &#39;curl/7.22.0&#39;,\n//   host: &#39;127.0.0.1:8000&#39;,\n//   accept: &#39;*/*&#39; }\nconsole.log(request.headers);</code></pre>\n"
            },
            {
              "textRaw": "message.trailers",
              "name": "trailers",
              "desc": "<!--\nThe request/response trailers object. Only populated after the 'end' event.\n-->\n\n<p>リクエスト／レスポンスのトレーラオブジェクトです。\n<code>&#39;end&#39;</code> イベントの後にだけ発生します。\n\n</p>\n"
            },
            {
              "textRaw": "message.method",
              "name": "method",
              "desc": "<!--\n**Only valid for request obtained from [http.Server][].**\n-->\n\n<p><strong> [http.Server][] から得たリクエストでのみ有効です </strong>\n\n</p>\n<!--\nThe request method as a string. Read only. Example:\n`'GET'`, `'DELETE'`.\n-->\n\n<p>リクエストメソッドを表す文字列です。参照のみ可能です。\n例: <code>&#39;GET&#39;</code>、<code>&#39;DELETE&#39;</code>\n\n</p>\n"
            },
            {
              "textRaw": "message.url",
              "name": "url",
              "desc": "<!--\n**Only valid for request obtained from [http.Server][].**\n-->\n\n<p><strong> [http.Server][] から得たリクエストでのみ有効です </strong>\n\n</p>\n<!--\nRequest URL string. This contains only the URL that is\npresent in the actual HTTP request. If the request is:\n-->\n\n<p>リクエスト URL を表す文字列です。\nこれは実際の HTTP リクエストに存在する URL だけを含みます。\nもしリクエストが:\n\n</p>\n<pre><code>GET /status?name=ryan HTTP/1.1\\r\\n\nAccept: text/plain\\r\\n\n\\r\\n</code></pre>\n<!--\nThen `request.url` will be:\n-->\n\n<p>この場合の <code>request.url</code> はこうなります:\n\n</p>\n<pre><code>&#39;/status?name=ryan&#39;</code></pre>\n<!--\nIf you would like to parse the URL into its parts, you can use\n`require('url').parse(request.url)`.  Example:\n-->\n\n<p>URL の要素を解析したい場合は、\n<code>require(&#39;url&#39;).parse(request.url)</code> を参照してください。例:\n\n</p>\n<pre><code>node&gt; require(&#39;url&#39;).parse(&#39;/status?name=ryan&#39;)\n{ href: &#39;/status?name=ryan&#39;,\n  search: &#39;?name=ryan&#39;,\n  query: &#39;name=ryan&#39;,\n  pathname: &#39;/status&#39; }</code></pre>\n<!--\nIf you would like to extract the params from the query string,\nyou can use the `require('querystring').parse` function, or pass\n`true` as the second argument to `require('url').parse`.  Example:\n-->\n\n<p>問い合わせ文字列からパラメータを取り出したい場合は、\n<code>require(&#39;querystring&#39;).parse</code> 関数を参照するか、\n<code>require(&#39;url&#39;).parse</code> の第 2 引数に <code>true</code> を渡してください。例:\n\n</p>\n<pre><code>node&gt; require(&#39;url&#39;).parse(&#39;/status?name=ryan&#39;, true)\n{ href: &#39;/status?name=ryan&#39;,\n  search: &#39;?name=ryan&#39;,\n  query: { name: &#39;ryan&#39; },\n  pathname: &#39;/status&#39; }</code></pre>\n"
            },
            {
              "textRaw": "message.statusCode",
              "name": "statusCode",
              "desc": "<!--\n**Only valid for response obtained from `http.ClientRequest`.**\n-->\n\n<p><strong> <code>http.ClientRequest</code> から得たレスポンスでのみ有効です </strong>\n\n</p>\n<!--\nThe 3-digit HTTP response status code. E.G. `404`.\n-->\n\n<p>3 桁の数字によるレスポンスのステータスコードです。例えば <code>404</code>。\n\n</p>\n"
            },
            {
              "textRaw": "message.socket",
              "name": "socket",
              "desc": "<!--\nThe `net.Socket` object associated with the connection.\n-->\n\n<p>コネクションに関連づけられた <code>net.Socket</code> オブジェクトです。\n\n</p>\n<!--\nWith HTTPS support, use request.connection.verifyPeer() and\nrequest.connection.getPeerCertificate() to obtain the client's\nauthentication details.\n-->\n\n<p>HTTPS では <code>request.connection.verifyPeer()</code> と\n<code>request.connection.getPeerCertificate()</code> で\nクライアントの認証の詳細を取得できます。\n\n</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "message.setTimeout(msecs, callback)",
              "type": "method",
              "name": "setTimeout",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`msecs` {Number} ",
                      "name": "msecs",
                      "type": "Number"
                    },
                    {
                      "textRaw": "`callback` {Function} ",
                      "name": "callback",
                      "type": "Function"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "msecs"
                    },
                    {
                      "name": "callback"
                    }
                  ]
                }
              ],
              "desc": "<!--\nCalls `message.connection.setTimeout(msecs, callback)`.\n-->\n\n<p><code>message.connection.setTimeout(msecs, callback)</code> を呼びます。\n\n</p>\n"
            }
          ]
        }
      ],
      "methods": [
        {
          "textRaw": "http.createServer([requestListener])",
          "type": "method",
          "name": "createServer",
          "desc": "<!--\nReturns a new web server object.\n-->\n\n<p>新しい Web サーバオブジェクトを返します。\n\n</p>\n<!--\nThe `requestListener` is a function which is automatically\nadded to the `'request'` event.\n-->\n\n<p><code>requestListener</code> は自動的に <code>&#39;request&#39;</code> イベントに加えられる関数です。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "requestListener",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "http.createClient([port], [host])",
          "type": "method",
          "name": "createClient",
          "desc": "<!--\nThis function is **deprecated**; please use [http.request()][] instead.\nConstructs a new HTTP client. `port` and `host` refer to the server to be\nconnected to.\n-->\n\n<p>この関数は <strong>deprecated</strong> です; 代わりに\n[http.request()][] を使用してください。\n新しい HTTP クライアントを構築します。\n<code>port</code> と <code>host</code> は接続するサーバを示します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "port",
                  "optional": true
                },
                {
                  "name": "host",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "http.request(options, [callback])",
          "type": "method",
          "name": "request",
          "desc": "<!--\nNode maintains several connections per server to make HTTP requests.\nThis function allows one to transparently issue requests.\n-->\n\n<p>Node は HTTP リクエストを行うために、サーバごとにいくつかのコネクションを\n保持します。\nこの関数はその一つを使って透過的にリクエストを発行できるようにします。\n\n</p>\n<!--\n`options` can be an object or a string. If `options` is a string, it is\nautomatically parsed with [url.parse()][].\n-->\n\n<p><code>options</code> はオブジェクトまたは文字列です。\nもし <code>options</code> が文字列なら、それは [url.parse()][] によって自動的に\n解析されます。\n\n</p>\n<!--\nOptions:\n-->\n\n<p>オプション:\n\n</p>\n<!--\n- `host`: A domain name or IP address of the server to issue the request to.\n  Defaults to `'localhost'`.\n- `hostname`: To support `url.parse()` `hostname` is preferred over `host`\n- `port`: Port of remote server. Defaults to 80.\n- `localAddress`: Local interface to bind for network connections.\n- `socketPath`: Unix Domain Socket (use one of host:port or socketPath)\n- `method`: A string specifying the HTTP request method. Defaults to `'GET'`.\n- `path`: Request path. Defaults to `'/'`. Should include query string if any.\n  E.G. `'/index.html?page=12'`\n- `headers`: An object containing request headers.\n- `auth`: Basic authentication i.e. `'user:password'` to compute an\n  Authorization header.\n- `agent`: Controls [Agent][] behavior. When an Agent is used request will\n  default to `Connection: keep-alive`. Possible values:\n - `undefined` (default): use [global Agent][] for this host and port.\n - `Agent` object: explicitly use the passed in `Agent`.\n - `false`: opts out of connection pooling with an Agent, defaults request to\n   `Connection: close`.\n-->\n\n<ul>\n<li><code>host</code>: リクエストを発行するサーバのドメイン名または IP アドレス。</li>\n<li><code>hostname</code>: <code>url.parse()</code> サポート。<code>hostname</code> は <code>host</code> を上書きします。</li>\n<li><code>port</code>: リモートサーバのポート。デフォルトは 80 です。</li>\n<li><code>localAddress</code>: ネットワーク接続をバインドするローカルインタフェースです。</li>\n<li><code>socketPath</code>: Unix ドメインソケット (host:port または socketPath のどちらか)</li>\n<li><code>method</code>: HTTP リクエストのメソッドの文字列。デフォルトは <code>&#39;GET&#39;</code> です。</li>\n<li><code>path</code>: リクエストのパス。デフォルトは <code>&#39;/&#39;</code> です。\n必要なら問い合わせ文字列を含めるべきです．\n例 <code>&#39;/index.html?page=12&#39;</code></li>\n<li><code>headers</code>: リクエストヘッダを含むオブジェクト。</li>\n<li><code>auth</code>: ベーシック認証すなわち Authorization ヘッダのための\n<code>&#39;user:password&#39;</code>。</li>\n<li><code>agent</code>: [Agent][] の振る舞いを制御します。\nエージェントが使われる場合、Connection:keep-alive がデフォルトになります。\n可能な値は:<ul>\n<li><code>undefined</code> (デフォルト): ホストとポートで [global Agent][] を使用します。</li>\n<li><code>Agent</code> オブジェクト: 明示的に渡された <code>Agent</code> を使用します。</li>\n<li><code>false</code>: Agent によるコネクションプーリングを使用しません。\n Connection:close の場合のデフォルトです。</li>\n</ul>\n</li>\n</ul>\n<!--\nThe optional `callback` parameter will be added as a one time listener for\nthe ['response'][] event.\n-->\n\n<p>オプションの <code>callback</code> 引数は、[&#39;response&#39;][] イベントへの\n一回限りのリスナとして追加されます。\n\n</p>\n<!--\n`http.request()` returns an instance of the [http.ClientRequest][]\nclass. The `ClientRequest` instance is a writable stream. If one needs to\nupload a file with a POST request, then write to the `ClientRequest` object.\n-->\n\n<p><code>http.request()</code> は [http.ClientRequest][] クラスのインスタンスを返します。\n<code>http.ClientRequest</code> のインスタンスは書き込み可能なストリームです。\nもし POST リクエストでファイルのアップロードがしたければ、\n<code>http.ClientRequest</code> オブジェクトに出力してください。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var options = {\n  hostname: &#39;www.google.com&#39;,\n  port: 80,\n  path: &#39;/upload&#39;,\n  method: &#39;POST&#39;\n};\n\nvar req = http.request(options, function(res) {\n  console.log(&#39;STATUS: &#39; + res.statusCode);\n  console.log(&#39;HEADERS: &#39; + JSON.stringify(res.headers));\n  res.setEncoding(&#39;utf8&#39;);\n  res.on(&#39;data&#39;, function (chunk) {\n    console.log(&#39;BODY: &#39; + chunk);\n  });\n});\n\nreq.on(&#39;error&#39;, function(e) {\n  console.log(&#39;problem with request: &#39; + e.message);\n});\n\n// write data to request body\nreq.write(&#39;data\\n&#39;);\nreq.write(&#39;data\\n&#39;);\nreq.end();</code></pre>\n<!--\nNote that in the example `req.end()` was called. With `http.request()` one\nmust always call `req.end()` to signify that you're done with the request -\neven if there is no data being written to the request body.\n-->\n\n<p>この例で <code>req.end()</code> が呼ばれていることに注意してください。\n<code>http.request()</code> では、リクエストが終了したことを示すために、\n常に <code>req.end()</code> を呼び出さなければなりません\n- リクエストのボディに出力するデータがなかったとしても。\n\n</p>\n<!--\nIf any error is encountered during the request (be that with DNS resolution,\nTCP level errors, or actual HTTP parse errors) an `'error'` event is emitted\non the returned request object.\n-->\n\n<p>リクエスト中に何らかのエラー (DNS 解決、TCP レベルのエラー、HTTP パースエラーなど) が発生すると、戻り値のリクエストオブジェクトで <code>&#39;error&#39;</code> イベントが生成されます。\n\n\n</p>\n<!--\nThere are a few special headers that should be noted.\n-->\n\n<p>いくつかの特別なヘッダに注意が必要です。\n\n</p>\n<!--\n* Sending a 'Connection: keep-alive' will notify Node that the connection to\n  the server should be persisted until the next request.\n\n* Sending a 'Content-length' header will disable the default chunked encoding.\n\n* Sending an 'Expect' header will immediately send the request headers.\n  Usually, when sending 'Expect: 100-continue', you should both set a timeout\n  and listen for the `continue` event. See RFC2616 Section 8.2.3 for more\n  information.\n\n* Sending an Authorization header will override using the `auth` option\n  to compute basic authentication.\n-->\n\n<ul>\n<li><p>&#39;Connection: keep-alive&#39; の送信は、サーバへのコネクションを次のリクエストまで持続することを Node に通知します。</p>\n</li>\n<li><p>&#39;Content-length&#39; ヘッダの送信は、デフォルトのチャンクエンコーディングを無効にします。</p>\n</li>\n<li><p>&#39;Expect&#39; ヘッダの送信は、リクエストヘッダを即時に送信します。\n通常、&#39;Expect: 100-continue&#39; を送信すると、タイムアウトと <code>continue</code> イベントを待ち受けます。詳細は RFC2616 の 8.2.3 節を参照してください。</p>\n</li>\n<li><p>Authorization ヘッダの送信は、<code>auth</code> オプションによるベーシック認証を\n上書きします。</p>\n</li>\n</ul>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "http.get(options, [callback])",
          "type": "method",
          "name": "get",
          "desc": "<!--\nSince most requests are GET requests without bodies, Node provides this\nconvenience method. The only difference between this method and `http.request()`\nis that it sets the method to GET and calls `req.end()` automatically.\n-->\n\n<p>ほとんどのリクエストは本文のない GET リクエストであるため、\nNode は便利なメソッドを提供します。\nこのメソッドと <code>http.request()</code> の間の違いは、メソッドを GET に設定して\n<code>req.end()</code> を自動的に呼び出すことだけです。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>http.get(&quot;http://www.google.com/index.html&quot;, function(res) {\n  console.log(&quot;Got response: &quot; + res.statusCode);\n}).on(&#39;error&#39;, function(e) {\n  console.log(&quot;Got error: &quot; + e.message);\n});</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "textRaw": "Class: http.Server",
          "type": "class",
          "name": "http.Server",
          "desc": "<!--\nThis is an [EventEmitter][] with the following events:\n-->\n\n<p>これは以下のイベントを持つ [EventEmitter][] です:\n\n</p>\n",
          "events": [
            {
              "textRaw": "Event: 'request'",
              "type": "event",
              "name": "request",
              "desc": "<p><code>function (request, response) { }</code>\n\n</p>\n<!--\nEmitted each time there is a request. Note that there may be multiple requests\nper connection (in the case of keep-alive connections).\n-->\n\n<p>リクエストの度に生成されます。\nコネクションごとに複数のリクエストがあるかもしれないことに注意してください\n(Keep Alive なコネクションの場合)。\n\n</p>\n<!--\n `request` is an instance of [http.IncomingMessage][] and `response` is\nan instance of [http.ServerResponse][].\n-->\n\n<p><code>request</code> は [http.IncomingMessage][] のインスタンス、\n<code>response</code> は [http.ServerResponse][] のインスタンスです。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'connection'",
              "type": "event",
              "name": "connection",
              "desc": "<p><code>function (socket) { }</code>\n\n</p>\n<!--\n When a new TCP stream is established. `socket` is an object of type\n `net.Socket`. Usually users will not want to access this event. In\n particular, the socket will not emit `readable` events because of how\n the protocol parser attaches to the socket. The `socket` can also be\n accessed at `request.connection`.\n-->\n\n<p>新しい TCP ストリームが確立した時。\n<code>socket</code> は <code>net.Socket</code> 型のオブジェクトです。\n通常の利用者がこのイベントにアクセスしたくなることはないでしょう。\nとりわけ、ソケットはプロトコルパーサにアタッチされるため、\n<code>&#39;readable&#39;</code> イベントを生成しません。\n<code>socket</code> は <code>request.connection</code> からアクセスすることもできます。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "desc": "<p><code>function () { }</code>\n\n</p>\n<!--\n Emitted when the server closes.\n-->\n\n<p>サーバがクローズした時に生成されます。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'checkContinue'",
              "type": "event",
              "name": "checkContinue",
              "desc": "<p><code>function (request, response) { }</code>\n\n</p>\n<!--\nEmitted each time a request with an http Expect: 100-continue is received.\nIf this event isn't listened for, the server will automatically respond\nwith a 100 Continue as appropriate.\n-->\n\n<p>httpの Expect: 100-continue リクエストを受信する度に生成されます。\nこのイベントが監視されない場合、サーバは自動的に 100 Continue を応答します。\n\n</p>\n<!--\nHandling this event involves calling [response.writeContinue()][] if the client\nshould continue to send the request body, or generating an appropriate HTTP\nresponse (e.g., 400 Bad Request) if the client should not continue to send the\nrequest body.\n-->\n\n<p>このイベントを処理する場合、クライアントがリクエストボディを送信し続けるべきなら\n[response.writeContinue()][] を呼び出す必要があります。\nあるいは、クライアントがリクエストボディを送信し続けるべきでないなら、\n適切な HTTP レスポンス (例えば 400 Bad Request) を生成します。\n\n</p>\n<!--\nNote that when this event is emitted and handled, the `request` event will\nnot be emitted.\n-->\n\n<p>このイベントが生成されて処理された場合、<code>request</code>イベントは生成されないことに注意してください。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'connect'",
              "type": "event",
              "name": "connect",
              "desc": "<p><code>function (request, socket, head) { }</code>\n\n</p>\n<!--\nEmitted each time a client requests a http CONNECT method. If this event isn't\nlistened for, then clients requesting a CONNECT method will have their\nconnections closed.\n-->\n\n<p>クライアントが HTTP の CONNECT メソッドを要求する度に生成されます。\nこのイベントが監視されない場合、CONNECT メソッドを要求したクライアントのコネクションはクローズされます。\n\n</p>\n<!--\n* `request` is the arguments for the http request, as it is in the request\n  event.\n* `socket` is the network socket between the server and client.\n* `head` is an instance of Buffer, the first packet of the tunneling stream,\n  this may be empty.\n-->\n\n<ul>\n<li><code>request</code> はリクエストイベントの引数と同様に HTTP リクエストです。</li>\n<li><code>socket</code> はサーバとクライアントの間のネットワークソケットです。</li>\n<li><code>head</code> はトンネリングストリームの最初のパケットを持つ Buffer のインスタンスで\n空の場合もあります。</li>\n</ul>\n<!--\nAfter this event is emitted, the request's socket will not have a `data`\nevent listener, meaning you will need to bind to it in order to handle data\nsent to the server on that socket.\n-->\n\n<p>このイベントが生成された後、リクエスト元のソケットはもう <code>data</code> イベントリスナーを持ちません。\nこのソケットでサーバへ送られたデータを扱うためにそれをバインドしなければならないことを意味します。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'upgrade'",
              "type": "event",
              "name": "upgrade",
              "desc": "<p><code>function (request, socket, head) { }</code>\n\n</p>\n<!--\nEmitted each time a client requests a http upgrade. If this event isn't\nlistened for, then clients requesting an upgrade will have their connections\nclosed.\n-->\n\n<p>クライアントが HTTP のアップグレードを要求する度に生成されます。\nこのイベントが監視されない場合、アップグレードを要求したクライアントのコネクションはクローズされます。\n\n</p>\n<!--\n* `request` is the arguments for the http request, as it is in the request\n  event.\n* `socket` is the network socket between the server and client.\n* `head` is an instance of Buffer, the first packet of the upgraded stream,\n  this may be empty.\n-->\n\n<ul>\n<li><code>request</code> はリクエストイベントの引数と同様に HTTP リクエストです。</li>\n<li><code>socket</code> はサーバとクライアントの間のネットワークソケットです。</li>\n<li><code>head</code> はアップグレードストリームの最初のパケットを持つ Buffer のインスタンス\n空の場合もあります。</li>\n</ul>\n<!--\nAfter this event is emitted, the request's socket will not have a `data`\nevent listener, meaning you will need to bind to it in order to handle data\nsent to the server on that socket.\n-->\n\n<p>このイベントが生成された後、リクエスト元のソケットはもう <code>data</code> イベントリスナーを持ちません。\nこのソケットでサーバへ送られたデータを扱うためにそれをバインドしなければならないことを意味します。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'clientError'",
              "type": "event",
              "name": "clientError",
              "desc": "<p><code>function (exception, socket) { }</code>\n\n</p>\n<!--\nIf a client connection emits an 'error' event - it will forwarded here.\n-->\n\n<p>クライアントコネクションが &#39;error&#39; イベントを発した場合 － ここに転送されます。\n\n</p>\n<!--\n`socket` is the `net.Socket` object that the error originated from.\n-->\n\n<p><code>socket</code> はエラーが発生した <code>net.Socket</code> オブジェクトです。\n\n\n</p>\n",
              "params": []
            }
          ],
          "methods": [
            {
              "textRaw": "server.listen(port, [hostname], [backlog], [callback])",
              "type": "method",
              "name": "listen",
              "desc": "<!--\nBegin accepting connections on the specified port and hostname.  If the\nhostname is omitted, the server will accept connections directed to any\nIPv4 address (`INADDR_ANY`).\n-->\n\n<p>指定されたポートとホスト名でコネクションの受け入れを開始します。\nホスト名が省略されると、サーバはどんな IPv4 アドレスへの接続も受け入れます (<code>INADDR_ANY</code>)。\n\n</p>\n<!--\nTo listen to a unix socket, supply a filename instead of port and hostname.\n-->\n\n<p>UNIX ドメインソケットを待ち受ける場合、ポートとホスト名ではなくファイル名を提供します。\n\n</p>\n<!--\nBacklog is the maximum length of the queue of pending connections.\nThe actual length will be determined by your OS through sysctl settings such as\n`tcp_max_syn_backlog` and `somaxconn` on linux. The default value of this\nparameter is 511 (not 512).\n-->\n\n<p>バックログは保留された接続のキューの最大長です。\n実際の長さは Linux では <code>tcp_max_syn_backlog</code> や <code>somaxconn</code> など、\nsysctl の設定を通じて OS によって決定されます。\nこのパラメータのデフォルト値は 511 (512 ではありません) です。\n\n</p>\n<!--\nThis function is asynchronous. The last parameter `callback` will be added as\na listener for the ['listening'][] event.  See also [net.Server.listen(port)][].\n-->\n\n<p>この関数は非同期です。最後の引数の <code>callback</code> は\n[&#39;listening&#39;][] イベントのリスナとして加えられます。\n詳細は [net.Server.listen(port)][] を参照してください。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "port"
                    },
                    {
                      "name": "hostname",
                      "optional": true
                    },
                    {
                      "name": "backlog",
                      "optional": true
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "server.listen(path, [callback])",
              "type": "method",
              "name": "listen",
              "desc": "<!--\nStart a UNIX socket server listening for connections on the given `path`.\n-->\n\n<p><code>path</code> で与えられたコネクションを待ち受ける UNIX ドメインソケットのサーバを開始します。\n\n</p>\n<!--\nThis function is asynchronous. The last parameter `callback` will be added as\na listener for the ['listening'][] event.  See also [net.Server.listen(path)][].\n-->\n\n<p>この関数は非同期です。最後の引数の <code>callback</code> は\n[&#39;listening&#39;][] イベントのリスナとして加えられます。\n詳細は [net.Server.listen(path)][] を参照してください。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "path"
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "server.listen(handle, [callback])",
              "type": "method",
              "name": "listen",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`handle` {Object} ",
                      "name": "handle",
                      "type": "Object"
                    },
                    {
                      "textRaw": "`callback` {Function} ",
                      "name": "callback",
                      "type": "Function",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "handle"
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nThe `handle` object can be set to either a server or socket (anything\nwith an underlying `_handle` member), or a `{fd: <n>}` object.\n-->\n\n<p><code>handle</code> オブジェクトには、サーバまたはソケット (下層の <code>_handle</code> メンバなら\nなんでも) または、 <code>{fd: &lt;n&gt;}</code> オブジェクトを設定することができます。\n\n</p>\n<!--\nThis will cause the server to accept connections on the specified\nhandle, but it is presumed that the file descriptor or handle has\nalready been bound to a port or domain socket.\n-->\n\n<p>これによりサーバは指定したハンドルへの接続を受け付けることになりますが、\nファイル記述子またはハンドルは既にポートまたはドメインソケットに\nバインドされているものと見なされます。\n\n</p>\n<!--\nListening on a file descriptor is not supported on Windows.\n-->\n\n<p>ファイル記述子へのリスニングは Windows ではサポートされません。\n\n</p>\n<!--\nThis function is asynchronous. The last parameter `callback` will be added as\na listener for the ['listening'](net.html#event_listening_) event.\nSee also [net.Server.listen()](net.html#net_server_listen_handle_callback).\n-->\n\n<p>この関数は非同期です。最後の引数の <code>callback</code> は\n<a href="\"net.html#event_listening_\"">&#39;listening&#39;</a> イベントのリスナとして加えられます。\n詳細は <a href="\"net.html#net_server_listen_handle_callback\"">net.Server.listen()</a>\nを参照してください。\n\n</p>\n"
            },
            {
              "textRaw": "server.close([callback])",
              "type": "method",
              "name": "close",
              "desc": "<!--\nStops the server from accepting new connections.  See [net.Server.close()][].\n-->\n\n<p>サーバが新しいコネクションを受け付けるのを終了します。\n[net.Server.close()][] を参照してください。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "server.setTimeout(msecs, callback)",
              "type": "method",
              "name": "setTimeout",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`msecs` {Number} ",
                      "name": "msecs",
                      "type": "Number"
                    },
                    {
                      "textRaw": "`callback` {Function} ",
                      "name": "callback",
                      "type": "Function"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "msecs"
                    },
                    {
                      "name": "callback"
                    }
                  ]
                }
              ],
              "desc": "<!--\nSets the timeout value for sockets, and emits a `'timeout'` event on\nthe Server object, passing the socket as an argument, if a timeout\noccurs.\n-->\n\n<p>ソケットにタイムアウト値を設定し、サーバオブジェクト上で <code>&#39;timeout&#39;</code>\nイベントを生成します。\nタイムアウトが発生すると、ソケットが引数として渡されます。\n\n</p>\n<!--\nIf there is a `'timeout'` event listener on the Server object, then it\nwill be called with the timed-out socket as an argument.\n-->\n\n<p>サーバオブジェクトに <code>&#39;timeout&#39;</code> イベントのリスナが存在すると、\nそれはタイムアウトしたソケットを引数として呼び出されます。\n\n</p>\n<!--\nBy default, the Server's timeout value is 2 minutes, and sockets are\ndestroyed automatically if they time out.  However, if you assign a\ncallback to the Server's `'timeout'` event, then you are responsible\nfor handling socket timeouts.\n-->\n\n<p>デフォルトでは、サーバのタイムアウト値は 2 分で、\nタイムアウトしたソケットは自動的に破棄されます。\nしかしながら、<code>&#39;timeout&#39;</code> イベントのコールバックをサーバに割り当てた場合、\nタイムアウトしたソケットのハンドリングはあなたの責務となります。\n\n</p>\n"
            }
          ],
          "properties": [
            {
              "textRaw": "server.maxHeadersCount",
              "name": "maxHeadersCount",
              "desc": "<!--\nLimits maximum incoming headers count, equal to 1000 by default. If set to 0 -\nno limit will be applied.\n-->\n\n<p>受け付けるヘッダ数の上限で、デフォルトは 1000 です。\n0 に設定されると、制限しないことになります。\n\n</p>\n"
            },
            {
              "textRaw": "`timeout` {Number} デフォルト = 120000 (2 分) ",
              "name": "timeout",
              "* {Number} Default": "120000 (2 minutes)",
              "desc": "<!--\nThe number of milliseconds of inactivity before a socket is presumed\nto have timed out.\n-->\n\n<p>不活性なソケットがタイムアウトしたと推定されるまでのミリ秒を表す数値。\n\n</p>\n<!--\nNote that the socket timeout logic is set up on connection, so\nchanging this value only affects *new* connections to the server, not\nany existing connections.\n-->\n\n<p>ソケットのタイムアウト処理は接続のセットアップ時に行われるため、\nこの値の変更は既存の接続ではなく、サーバへの <em>新しい</em> 接続にだけ\n影響することに注意してください。\n\n</p>\n<!--\nSet to 0 to disable any kind of automatic timeout behavior on incoming\nconnections.\n-->\n\n<p>0 を設定すると、到着する接続に対する自動的なタイムアウトの振る舞いは\n無効になります。\n\n</p>\n",
              "shortDesc": "デフォルト = 120000 (2 分)"
            }
          ]
        },
        {
          "textRaw": "Class: http.ServerResponse",
          "type": "class",
          "name": "http.ServerResponse",
          "desc": "<!--\nThis object is created internally by a HTTP server--not by the user. It is\npassed as the second parameter to the `'request'` event.\n\nThe response implements the [Writable Stream][] interface. This is an\n[EventEmitter][] with the following events:\n-->\n\n<p>このオブジェクトは HTTP サーバ内部 － ユーザではなく － で作成されます。\n<code>&#39;request&#39;</code> リスナーの第 2 引数として渡されます。\n\n</p>\n<p>レスポンスは [Writable  Stream][] インタフェースを実装します。\nこれは以下のイベントを持つ [EventEmitter][] です:\n\n</p>\n",
          "events": [
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "desc": "<p><code>function () { }</code>\n\n</p>\n<!--\nIndicates that the underlying connection was terminated before\n[response.end()][] was called or able to flush.\n-->\n\n<p>[response.end()][] が呼び出されたりフラッシュされる前に、\n下層の接続が切断されたことを示します。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'finish'",
              "type": "event",
              "name": "finish",
              "desc": "<p><code>function () { }</code>\n\n</p>\n<!--\nEmitted when the response has been sent. More specifically, this event is\nemitted when the last segment of the response headers and body have been\nhanded off to the operating system for transmission over the network. It\ndoes not imply that the client has received anything yet.\n-->\n\n<p>レスポンスが送信されると生成されます。\nより詳しくは、このイベントはレスポンスヘッダおよびボディの最後のセグメントが\nネットワークに転送されるためOSに渡された時に生成されます。\nこれはクライアントが何かを受信したことを意味しません。\n\n</p>\n<!--\nAfter this event, no more events will be emitted on the response object.\n-->\n\n<p>このイベントの後、レスポンス上ではどんなイベントも生成されません。\n\n</p>\n",
              "params": []
            }
          ],
          "methods": [
            {
              "textRaw": "response.writeContinue()",
              "type": "method",
              "name": "writeContinue",
              "desc": "<!--\nSends a HTTP/1.1 100 Continue message to the client, indicating that\nthe request body should be sent. See the ['checkContinue'][] event on `Server`.\n-->\n\n<p>HTTP/1.1 の 100 Continue メッセージをクライアントに送信し、\nリクエストボディを送信してもよいことを示します。\n<code>Server</code>の [&#39;checkContinue&#39;][] イベントを参照してください。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "response.writeHead(statusCode, [reasonPhrase], [headers])",
              "type": "method",
              "name": "writeHead",
              "desc": "<!--\nSends a response header to the request. The status code is a 3-digit HTTP\nstatus code, like `404`. The last argument, `headers`, are the response headers.\nOptionally one can give a human-readable `reasonPhrase` as the second\nargument.\n-->\n\n<p>レスポンスヘッダを送信します。\nステータスコードは <code>404</code> のような 3 桁の数字による HTTP ステータスコードです。\n最後の引数 <code>headers</code> は、レスポンスヘッダです。\nオプションとして人に読める形式の <code>reasonPhrase</code> を第 2 引数で与えることができます。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var body = &#39;hello world&#39;;\nresponse.writeHead(200, {\n  &#39;Content-Length&#39;: body.length,\n  &#39;Content-Type&#39;: &#39;text/plain&#39; });</code></pre>\n<!--\nThis method must only be called once on a message and it must\nbe called before [response.end()][] is called.\n\nIf you call [response.write()][] or [response.end()][] before calling this, the\nimplicit/mutable headers will be calculated and call this function for you.\n-->\n\n<p>このメソッドはメッセージごとに 1 回だけ呼び出されなくてはならず、\n[response.end()][] の前に呼び出されなければなりません。\n\n</p>\n<p>もしこのメソッドが呼び出される前に [response.write()][] または\n[response.end()][] が呼ばれると、暗黙的に可変のヘッダが算出されて、\nこの関数が呼び出されます。\n\n</p>\n<!--\nNote: that Content-Length is given in bytes not characters. The above example\nworks because the string `'hello world'` contains only single byte characters.\nIf the body contains higher coded characters then `Buffer.byteLength()`\nshould be used to determine the number of bytes in a given encoding.\nAnd Node does not check whether Content-Length and the length of the body\nwhich has been transmitted are equal or not.\n-->\n\n<p>注意: <code>Content-Length</code> は文字数ではなくバイト数で与えられます。\n上の例が動作するのは <code>&#39;hello world&#39;</code> という文字列が単一バイト文字だけを含むためです。\nもしボディがより上位にコード化された文字を含む場合は、\n指定したエンコーディングによるバイト数を得るために <code>Buffer.byteLength()</code> を使うべきです。\nNode は、Content-Length と実際に送信されたレスポンスボディの長さが等しいかどうかチェックしません。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "statusCode"
                    },
                    {
                      "name": "reasonPhrase",
                      "optional": true
                    },
                    {
                      "name": "headers",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "response.setTimeout(msecs, callback)",
              "type": "method",
              "name": "setTimeout",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`msecs` {Number} ",
                      "name": "msecs",
                      "type": "Number"
                    },
                    {
                      "textRaw": "`callback` {Function} ",
                      "name": "callback",
                      "type": "Function"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "msecs"
                    },
                    {
                      "name": "callback"
                    }
                  ]
                }
              ],
              "desc": "<!--\nSets the Socket's timeout value to `msecs`.  If a callback is\nprovided, then it is added as a listener on the `'timeout'` event on\nthe response object.\n-->\n\n<p>ソケットのタイムアウト値を <code>msec</code> に設定します。\nコールバックが与えられると、それはレスポンスオブジェクトの <code>&#39;timeout&#39;</code>\nイベントのリスナとして加えられます。\n\n</p>\n<!--\nIf no `'timeout'` listener is added to the request, the response, or\nthe server, then sockets are destroyed when they time out.  If you\nassign a handler on the request, the response, or the server's\n`'timeout'` events, then it is your responsibility to handle timed out\nsockets.\n-->\n\n<p>リクエスト、レスポンス、そしてサーバのいずれにも <code>&#39;timeout&#39;</code>\nリスナが存在しない場合、タイムアウトしたソケットは破棄されます。\nもしリクエスト、レスポンス、サーバのいずれかに <code>&#39;timeout&#39;</code> イベントを\n設定した場合、タイムアウトしたソケットのハンドリングはあなたの責務となります。\n\n</p>\n"
            },
            {
              "textRaw": "response.setHeader(name, value)",
              "type": "method",
              "name": "setHeader",
              "desc": "<!--\nSets a single header value for implicit headers.  If this header already exists\nin the to-be-sent headers, its value will be replaced.  Use an array of strings\nhere if you need to send multiple headers with the same name.\n-->\n\n<p>暗黙的ヘッダのヘッダ値を設定します。\n送信されようとしているレスポンスヘッダにこのヘッダが既に含まれている場合、\nその値は置き換えられます。\n同じ名前で複数のヘッダを送信したい場合は文字列の配列を使ってください。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>response.setHeader(&quot;Content-Type&quot;, &quot;text/html&quot;);</code></pre>\n<!--\nor\n-->\n\n<p>または\n\n</p>\n<pre><code>response.setHeader(&quot;Set-Cookie&quot;, [&quot;type=ninja&quot;, &quot;language=javascript&quot;]);</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "name"
                    },
                    {
                      "name": "value"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "response.getHeader(name)",
              "type": "method",
              "name": "getHeader",
              "desc": "<!--\nReads out a header that's already been queued but not sent to the client.  Note\nthat the name is case insensitive.  This can only be called before headers get\nimplicitly flushed.\n-->\n\n<p>すでにキューに入れられているが未送信のヘッダを読み上げます．\n名前は大文字小文字を区別しないことに注意してください。\nこれはヘッダが暗黙的にフラッシュされる前だけ呼び出すことができます。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var contentType = response.getHeader(&#39;content-type&#39;);</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "name"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "response.removeHeader(name)",
              "type": "method",
              "name": "removeHeader",
              "desc": "<!--\nRemoves a header that's queued for implicit sending.\n-->\n\n<p>暗黙的に送信するためキューに入れられたヘッダを削除します。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>response.removeHeader(&quot;Content-Encoding&quot;);</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "name"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "response.write(chunk, [encoding])",
              "type": "method",
              "name": "write",
              "desc": "<!--\nIf this method is called and [response.writeHead()][] has not been called,\nit will switch to implicit header mode and flush the implicit headers.\n\nThis sends a chunk of the response body. This method may\nbe called multiple times to provide successive parts of the body.\n-->\n\n<p>このメソッドが呼び出され、[response.writeHead()][] が呼び出されなければ、\n暗黙的ヘッダモードに切り替わり、暗黙的ヘッダはフラッシュされます。\n\n</p>\n<p>これはレスポンスボディのチャンクを送信します。\nこのメソッドはボディの連続した部分を提供するために複数回呼び出されるかもしれません。\n\n</p>\n<!--\n`chunk` can be a string or a buffer. If `chunk` is a string,\nthe second parameter specifies how to encode it into a byte stream.\nBy default the `encoding` is `'utf8'`.\n-->\n\n<p><code>chunk</code> は文字列またはバッファにすることができます。\n<code>chunk</code> が文字列の場合、どのエンコードでバイトストリームにするかを第 2 引数で指定します。\nデフォルトの <code>encoding</code> は <code>&#39;utf8&#39;</code> です。\n\n</p>\n<!--\n**Note**: This is the raw HTTP body and has nothing to do with\nhigher-level multi-part body encodings that may be used.\n-->\n\n<p><strong>注意</strong>: これは生の HTTP ボディで、\n高水準のマルチパートボディエンコーディングで使われるものとは無関係です。\n\n</p>\n<!--\nThe first time `response.write()` is called, it will send the buffered\nheader information and the first body to the client. The second time\n`response.write()` is called, Node assumes you're going to be streaming\ndata, and sends that separately. That is, the response is buffered up to the\nfirst chunk of body.\n-->\n\n<p>初めて <code>response.write()</code> が呼び出されると、\nバッファリングされていたヘッダ情報と最初のボディがクライアントに送信されます。\n2 回目に <code>response.write()</code> が呼ばれると、\nNode はストリーミングデータを分割して送信しようとしていると仮定します。\nすなわち、レスポンスはボディの最初のチャンクまでバッファリングされます。\n\n</p>\n<!--\nReturns `true` if the entire data was flushed successfully to the kernel\nbuffer. Returns `false` if all or part of the data was queued in user memory.\n`'drain'` will be emitted when the buffer is again free.\n-->\n\n<p>データ全体のカーネルバッファへのフラッシュが成功すると <code>true</code> を返します。\nデータ全体または一部がユーザメモリ内のキューに入れられた場合は\n<code>false</code> を返します。\n再びバッファが空いた場合は <code>&#39;drain&#39;</code> イベントが生成されます。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "chunk"
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "response.addTrailers(headers)",
              "type": "method",
              "name": "addTrailers",
              "desc": "<!--\nThis method adds HTTP trailing headers (a header but at the end of the\nmessage) to the response.\n-->\n\n<p>このメソッドは HTTP トレーラヘッダ (メッセージの最後に置かれるヘッダ) をレスポンスに追加します。\n\n</p>\n<!--\nTrailers will **only** be emitted if chunked encoding is used for the\nresponse; if it is not (e.g., if the request was HTTP/1.0), they will\nbe silently discarded.\n-->\n\n<p>トレーラはレスポンスがチャンク化されたエンコーディングで<strong>のみ</strong>生成されます;\nそうでなければ (例えばリクエストが HTTP/1.0)、黙って破棄されます。\n\n</p>\n<!--\nNote that HTTP requires the `Trailer` header to be sent if you intend to\nemit trailers, with a list of the header fields in its value. E.g.,\n-->\n\n<p>HTTP は、トレーラを生成するならそのヘッダフィールドのリストを値として\n<code>Trailer</code> ヘッダを送信することを要求していることに注意してください。\n\n</p>\n<pre><code>response.writeHead(200, { &#39;Content-Type&#39;: &#39;text/plain&#39;,\n                          &#39;Trailer&#39;: &#39;Content-MD5&#39; });\nresponse.write(fileData);\nresponse.addTrailers({&#39;Content-MD5&#39;: &quot;7895bf4b8828b55ceaf47747b4bca667&quot;});\nresponse.end();</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "headers"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "response.end([data], [encoding])",
              "type": "method",
              "name": "end",
              "desc": "<!--\nThis method signals to the server that all of the response headers and body\nhave been sent; that server should consider this message complete.\nThe method, `response.end()`, MUST be called on each\nresponse.\n-->\n\n<p>このメソッドはレスポンスの全てのヘッダとボディを送信したことをサーバに伝えます;\nサーバはメッセージが終了したと考えるべきです。\nこの <code>response.end()</code> メソッドは各レスポンスごとに呼び出さなければ<em>なりません</em>。\n\n</p>\n<!--\nIf `data` is specified, it is equivalent to calling `response.write(data, encoding)`\nfollowed by `response.end()`.\n-->\n\n<p><code>data</code> が指定された場合、\n<code>response.write(data, encoding)</code> に続けて <code>response.end()</code> を呼び出すのと等価です。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "data",
                      "optional": true
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            }
          ],
          "properties": [
            {
              "textRaw": "response.statusCode",
              "name": "statusCode",
              "desc": "<!--\nWhen using implicit headers (not calling [response.writeHead()][] explicitly),\nthis property controls the status code that will be sent to the client when\nthe headers get flushed.\n-->\n\n<p>([response.writeHead()][] が明示的に呼ばれないために) 暗黙的なヘッダが\n使われる場合、このプロパティはヘッダがフラッシュされる時に\nクライアントへ送信されるステータスコードを制御します。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>response.statusCode = 404;</code></pre>\n<!--\nAfter response header was sent to the client, this property indicates the\nstatus code which was sent out.\n-->\n\n<p>レスポンスヘッダがクライアントに送信された後、\nこのプロパティは送信されたステータスコードを示します。\n\n</p>\n"
            },
            {
              "textRaw": "response.headersSent",
              "name": "headersSent",
              "desc": "<!--\nBoolean (read-only). True if headers were sent, false otherwise.\n-->\n\n<p>(読み込み専用の) Boolean。\nヘッダが送信済みなら true、それ以外は false です。\n\n</p>\n"
            },
            {
              "textRaw": "response.sendDate",
              "name": "sendDate",
              "desc": "<!--\nWhen true, the Date header will be automatically generated and sent in\nthe response if it is not already present in the headers. Defaults to true.\n\nThis should only be disabled for testing; HTTP requires the Date header\nin responses.\n-->\n\n<p><code>true</code> の場合、Date ヘッダが自動的に生成され、レスポンスとして送信されます\n(<code>headers</code> にすでに与えられていない場合)。\nデフォルトは <code>true</code> です。\n\n</p>\n<p>これを無効にするのはテストでのみにすべきです。\nHTTP はレスポンスに Date ヘッダを要求します。\n\n</p>\n"
            }
          ]
        },
        {
          "textRaw": "Class: http.Agent",
          "type": "class",
          "name": "http.Agent",
          "desc": "<!--\nIn node 0.5.3+ there is a new implementation of the HTTP Agent which is used\nfor pooling sockets used in HTTP client requests.\n\nPreviously, a single agent instance helped pool for a single host+port. The\ncurrent implementation now holds sockets for any number of hosts.\n\nThe current HTTP Agent also defaults client requests to using\nConnection:keep-alive. If no pending HTTP requests are waiting on a socket\nto become free the socket is closed. This means that node's pool has the\nbenefit of keep-alive when under load but still does not require developers\nto manually close the HTTP clients using keep-alive.\n\nSockets are removed from the agent's pool when the socket emits either a\n\"close\" event or a special \"agentRemove\" event. This means that if you intend\nto keep one HTTP request open for a long time and don't want it to stay in the\npool you can do something along the lines of:\n-->\n\n<p>Node 0.5.3 以降には、HTTP クライアントリクエストのソケットを\nプーリングするために新しい HTTP Agent の実装が存在します。\n\n</p>\n<p>以前は、エージェントの一つのインスタンスが一つのホスト + ポートのプールを\n助けていましたが、現在の実装では任意の数のホストに対するソケットを\n保持できるようになりました。\n\n</p>\n<p>現在の HTTP Agent では、クライアントリクエストはデフォルトで\nConnection:keep-alive を使うようにもなりました。\nソケットを待ってペンディングになっている HTTP リクエストがなければ、\nソケットはクローズされます。\nこれは、node のプールは高負荷時に keep-alive のメリットを持ちながら、\nkeep-alive を使用する HTTP クライアントを開発者が手動でクローズする\n必要がないことを意味します。\n\n</p>\n<p>ソケットは <code>&#39;close&#39;</code> イベントまたは特別な <code>&#39;agentRemove&#39;</code> イベントが\n生成された時にエージェントのプールから削除されます。\nこれは、一つの HTTP リクエストを長時間オープンしたままにするために、\nプールにソケットがとどまらないことを意図するなら、\n以下のようにすることができることを意味します:\n\n</p>\n<pre><code>http.get(options, function(res) {\n  // Do stuff\n}).on(&quot;socket&quot;, function (socket) {\n  socket.emit(&quot;agentRemove&quot;);\n});</code></pre>\n<!--\nAlternatively, you could just opt out of pooling entirely using `agent:false`:\n-->\n\n<p>別の方法として、 <code>agent: false</code> を指定することで、\nプーリングを使用しないこともできます:\n\n</p>\n<pre><code>http.get({hostname:&#39;localhost&#39;, port:80, path:&#39;/&#39;, agent:false}, function (res) {\n  // Do stuff\n})</code></pre>\n",
          "properties": [
            {
              "textRaw": "agent.maxSockets",
              "name": "maxSockets",
              "desc": "<!--\nBy default set to 5. Determines how many concurrent sockets the agent can have\nopen per origin. Origin is either a 'host:port' or 'host:port:localAddress'\ncombination.\n-->\n\n<p>デフォルトでは 5 に設定されます。\nエージェントがオリジン毎にいくつのソケットを並行にオープンするかを決定します。\nオリジンは <code>&#39;host:port&#39;</code> または <code>&#39;host:port:localAddress&#39;</code>\nの組み合わせのいずれかです。\n\n</p>\n"
            },
            {
              "textRaw": "agent.sockets",
              "name": "sockets",
              "desc": "<!--\nAn object which contains arrays of sockets currently in use by the Agent. Do not\nmodify.\n-->\n\n<p>エージェントが現在使っているソケットの配列です。\n変更しないでください。\n\n</p>\n"
            },
            {
              "textRaw": "agent.requests",
              "name": "requests",
              "desc": "<!--\nAn object which contains queues of requests that have not yet been assigned to\nsockets. Do not modify.\n-->\n\n<p>まだソケットが割り当てられていないリクエストのキューを含むオブジェクトです。\n変更しないでください。\n\n</p>\n"
            }
          ]
        },
        {
          "textRaw": "Class: http.ClientRequest",
          "type": "class",
          "name": "http.ClientRequest",
          "desc": "<!--\nThis object is created internally and returned from `http.request()`.  It\nrepresents an _in-progress_ request whose header has already been queued.  The\nheader is still mutable using the `setHeader(name, value)`, `getHeader(name)`,\n`removeHeader(name)` API.  The actual header will be sent along with the first\ndata chunk or when closing the connection.\n-->\n\n<p>このオブジェクトは HTTP サーバ内部で作成され、<code>http.request()</code> から返されます。\nそれはヘッダがキューに入れられた <em>進行中</em> のリクエストを表現します。\nヘッダは <code>setHeader(name, value)</code>, <code>getHeader(name)</code>, <code>removeHeader(name)</code> API によってまだ可変のままです。\n実際にヘッダが送信されるのは、最初のデータチャンクが送信される時またはコネクションがクローズされる時です。\n\n</p>\n<!--\nTo get the response, add a listener for `'response'` to the request object.\n`'response'` will be emitted from the request object when the response\nheaders have been received.  The `'response'` event is executed with one\nargument which is an instance of [http.IncomingMessage][].\n-->\n\n<p>レスポンスを取得するには、<code>&#39;response&#39;</code> 用のリスナーをリクエストオブジェクトに加えます。\n<code>&#39;response&#39;</code> イベントはレスポンスヘッダを受信するとリクエストオブジェクトによって生成されます。\n<code>&#39;response&#39;</code> イベントは [http.IncomingMessage][] のインスタンスを\n唯一の引数として実行されます。\n\n</p>\n<!--\nDuring the `'response'` event, one can add listeners to the\nresponse object; particularly to listen for the `'data'` event.\n-->\n\n<p><code>&#39;response&#39;</code> イベントの間、レスポンスオブジェクトにリスナーを加えることができます;\nとりわけ <code>&#39;data&#39;</code> イベントのリスナーです。\n\n</p>\n<!--\nIf no `'response'` handler is added, then the response will be\nentirely discarded.  However, if you add a `'response'` event handler,\nthen you **must** consume the data from the response object, either by\ncalling `response.read()` whenever there is a `'readable'` event, or\nby adding a `'data'` handler, or by calling the `.resume()` method.\nUntil the data is consumed, the `'end'` event will not fire.  Also, until\nthe data is read it will consume memory that can eventually lead to a\n'process out of memory' error.\n-->\n\n<p><code>&#39;response&#39;</code> ハンドラが加えられない場合、レスポンスは完全に捨てられます。\nしかし、<code>&#39;response&#39;</code> イベントハンドラを加えた場合は、\n<code>&#39;readable&#39;</code> イベントが発生した時に <code>response.read()</code> を呼ぶか、\n<code>&#39;data&#39;</code> ハンドラを加えるか、<code>.resume()</code> メソッドを呼び出すかのいずれかにより、\nレスポンスオブジェクトからのデータを消費しなければ <em>なりません</em> 。\nデータが消費されるまで、<code>&#39;end&#39;</code> イベントは生成されません。\nまた、データは読まれるまでメモリを消費し、&#39;process out of memory&#39;\nエラーにつながることになります。\n\n</p>\n<!--\nThis is a `Writable Stream`.\nNote: Node does not check whether Content-Length and the length of the body\nwhich has been transmitted are equal or not.\n\nNote: Node does not check whether Content-Length and the length of the body\nwhich has been transmitted are equal or not.\n-->\n\n<p>これは <code>Writable Stream</code> です。\n注意: Node は Content-Length と実際に送信されたリクエストボディの長さが等しいかどうかチェックしません。\n\n</p>\n<p><code>ServerRequest</code> が <code>&#39;data&#39;</code> イベントを生成した時にリスナが存在しなければ、\n<strong>データは失われる</strong>ことに注意してください。\n\n</p>\n<!--\nThe request implements the [Writable Stream][] interface. This is an\n[EventEmitter][] with the following events:\n-->\n\n<p>リクエストは [Writable  Stream][] インタフェースを実装します。\nこれは以下のイベントを持つ [EventEmitter][] です。\n\n</p>\n",
          "events": [
            {
              "textRaw": "Event 'response'",
              "type": "event",
              "name": "response",
              "desc": "<p><code>function (response) { }</code>\n\n</p>\n<!--\nEmitted when a response is received to this request. This event is emitted only\nonce. The `response` argument will be an instance of [http.IncomingMessage][].\n-->\n\n<p>このリクエストに対するレスポンスを受信した時に生成されます。\nこのイベントは一回だけ生成されます。\n<code>response</code> 引数は [http.IncomingMessage][] のインスタンスです。\n\n</p>\n<!--\nOptions:\n-->\n\n<p>オプション:\n\n</p>\n<!--\n- `host`: A domain name or IP address of the server to issue the request to.\n- `port`: Port of remote server.\n- `socketPath`: Unix Domain Socket (use one of host:port or socketPath)\n-->\n\n<ul>\n<li><code>host</code>: リクエストを発行するサーバのドメイン名または IP アドレス。</li>\n<li><code>port</code>: リモートサーバのポート。</li>\n<li><code>soocketPath</code>: Unix ドメインソケット (host:port または socketPath のどちらか)</li>\n</ul>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'socket'",
              "type": "event",
              "name": "socket",
              "desc": "<p><code>function (socket) { }</code>\n\n</p>\n<!--\nEmitted after a socket is assigned to this request.\n-->\n\n<p>このリクエストにソケットが割り当てられた後に生成されます。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'connect'",
              "type": "event",
              "name": "connect",
              "desc": "<p><code>function (response, socket, head) { }</code>\n\n</p>\n<!--\nEmitted each time a server responds to a request with a CONNECT method. If this\nevent isn't being listened for, clients receiving a CONNECT method will have\ntheir connections closed.\n-->\n\n<p>サーバが CONNECT メソッドの要求に応答する度に生成されます。\nこのイベントが監視されていない場合、クライアントが CONNECT メソッドへの\nレスポンスを受信すると、そのコネクションはクローズされます。\n\n</p>\n<!--\nA client server pair that show you how to listen for the `connect` event.\n-->\n\n<p>どのように <code>connect</code> イベントを監視するかを示すクライアントとサーバのペア:\n\n\n</p>\n<pre><code>var http = require(&#39;http&#39;);\nvar net = require(&#39;net&#39;);\nvar url = require(&#39;url&#39;);\n\n// Create an HTTP tunneling proxy\nvar proxy = http.createServer(function (req, res) {\n  res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\n  res.end(&#39;okay&#39;);\n});\nproxy.on(&#39;connect&#39;, function(req, cltSocket, head) {\n  // connect to an origin server\n  var srvUrl = url.parse(&#39;http://&#39; + req.url);\n  var srvSocket = net.connect(srvUrl.port, srvUrl.hostname, function() {\n    cltSocket.write(&#39;HTTP/1.1 200 Connection Established\\r\\n&#39; +\n                    &#39;Proxy-agent: Node-Proxy\\r\\n&#39; +\n                    &#39;\\r\\n&#39;);\n    srvSocket.write(head);\n    srvSocket.pipe(cltSocket);\n    cltSocket.pipe(srvSocket);\n  });\n});\n\n// now that proxy is running\nproxy.listen(1337, &#39;127.0.0.1&#39;, function() {\n\n  // make a request to a tunneling proxy\n  var options = {\n    port: 1337,\n    hostname: &#39;127.0.0.1&#39;,\n    method: &#39;CONNECT&#39;,\n    path: &#39;www.google.com:80&#39;\n  };\n\n  var req = http.request(options);\n  req.end();\n\n  req.on(&#39;connect&#39;, function(res, socket, head) {\n    console.log(&#39;got connected!&#39;);\n\n    // make a request over an HTTP tunnel\n    socket.write(&#39;GET / HTTP/1.1\\r\\n&#39; +\n                 &#39;Host: www.google.com:80\\r\\n&#39; +\n                 &#39;Connection: close\\r\\n&#39; +\n                 &#39;\\r\\n&#39;);\n    socket.on(&#39;data&#39;, function(chunk) {\n      console.log(chunk.toString());\n    });\n    socket.on(&#39;end&#39;, function() {\n      proxy.close();\n    });\n  });\n});</code></pre>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'upgrade'",
              "type": "event",
              "name": "upgrade",
              "desc": "<p><code>function (response, socket, head) { }</code>\n\n</p>\n<!--\nEmitted each time a server responds to a request with an upgrade. If this\nevent isn't being listened for, clients receiving an upgrade header will have\ntheir connections closed.\n-->\n\n<p>サーバがアップグレード要求に応答する度に生成されます。\nこのイベントが監視されていない場合、クライアントがアップグレードヘッダを受信するとそのコネクションはクローズされます。\n\n</p>\n<!--\nA client server pair that show you how to listen for the `upgrade` event.\n-->\n\n<p>どのように <code>upgrade</code> イベントを監視するかを示すクライアントとサーバのペア:\n\n</p>\n<pre><code>var http = require(&#39;http&#39;);\n\n// Create an HTTP server\nvar srv = http.createServer(function (req, res) {\n  res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\n  res.end(&#39;okay&#39;);\n});\nsrv.on(&#39;upgrade&#39;, function(req, socket, head) {\n  socket.write(&#39;HTTP/1.1 101 Web Socket Protocol Handshake\\r\\n&#39; +\n               &#39;Upgrade: WebSocket\\r\\n&#39; +\n               &#39;Connection: Upgrade\\r\\n&#39; +\n               &#39;\\r\\n&#39;);\n\n  socket.pipe(socket); // echo back\n});\n\n// now that server is running\nsrv.listen(1337, &#39;127.0.0.1&#39;, function() {\n\n  // make a request\n  var options = {\n    port: 1337,\n    hostname: &#39;127.0.0.1&#39;,\n    headers: {\n      &#39;Connection&#39;: &#39;Upgrade&#39;,\n      &#39;Upgrade&#39;: &#39;websocket&#39;\n    }\n  };\n\n  var req = http.request(options);\n  req.end();\n\n  req.on(&#39;upgrade&#39;, function(res, socket, upgradeHead) {\n    console.log(&#39;got upgraded!&#39;);\n    socket.end();\n    process.exit(0);\n  });\n});</code></pre>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'continue'",
              "type": "event",
              "name": "continue",
              "desc": "<p><code>function () { }</code>\n\n</p>\n<!--\nEmitted when the server sends a '100 Continue' HTTP response, usually because\nthe request contained 'Expect: 100-continue'. This is an instruction that\nthe client should send the request body.\n-->\n\n<p>通常、リクエストが &#39;Expect: 100-continue&#39; を含んでいたことにより、\nサーバが &#39;100 Continue&#39; HTTP レスポンスを送信することで生成されます。\nこれはクライアントがリクエストボディを送信すべき事を示します。\n\n</p>\n",
              "params": []
            }
          ],
          "methods": [
            {
              "textRaw": "request.write(chunk, [encoding])",
              "type": "method",
              "name": "write",
              "desc": "<!--\nSends a chunk of the body.  By calling this method\nmany times, the user can stream a request body to a\nserver--in that case it is suggested to use the\n`['Transfer-Encoding', 'chunked']` header line when\ncreating the request.\n-->\n\n<p>ボディのチャンクを送信します。\nこのメソッドを何回も呼び出すと、サーバへのリクエストボディをストリーム化できます － \nこのケースは <code>[&#39;Transfer-Encoding&#39;, &#39;chunked&#39;]</code> ヘッダでリクエストを生成したことを意味します。\n\n</p>\n<!--\nThe `chunk` argument should be a [Buffer][] or a string.\n-->\n\n<p><code>chunk</code> 引数は [Buffer][] または文字列です。\n\n</p>\n<!--\nThe `encoding` argument is optional and only applies when `chunk` is a string.\nDefaults to `'utf8'`.\n-->\n\n<p><code>encoding</code> 引数はオプションで、<code>chunk</code> が文字列の場合だけ適用されます。\nデフォルトは <code>&#39;utf8&#39;</code> です。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "chunk"
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "request.end([data], [encoding])",
              "type": "method",
              "name": "end",
              "desc": "<!--\nFinishes sending the request. If any parts of the body are\nunsent, it will flush them to the stream. If the request is\nchunked, this will send the terminating `'0\\r\\n\\r\\n'`.\n-->\n\n<p>リクエストの送信を終了します。\nボディのいくつかの部分がまだ送信されていない場合、それはストリームにフラッシュされます。\nリクエストがチャンク化されている場合、これは終端の <code>&#39;0\\r\\n\\r\\n&#39;</code> を送信します。\n\n</p>\n<!--\nIf `data` is specified, it is equivalent to calling\n`request.write(data, encoding)` followed by `request.end()`.\n-->\n\n<p><code>data</code> が指定された場合は、\n<code>request.write(data, encoding)</code> に続けて <code>request.end()</code> を呼び出すのと等価です。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "data",
                      "optional": true
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "request.abort()",
              "type": "method",
              "name": "abort",
              "desc": "<!--\nAborts a request.  (New since v0.3.8.)\n-->\n\n<p>リクエストをアボートします (v0.3.8 からの新機能)\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "request.setTimeout(timeout, [callback])",
              "type": "method",
              "name": "setTimeout",
              "desc": "<!--\nOnce a socket is assigned to this request and is connected\n[socket.setTimeout()][] will be called.\n-->\n\n<p>このリクエストにソケットが割り当てられて接続した際に、\n[socket.setTimeout()][] が呼び出されます。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "timeout"
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "request.setNoDelay([noDelay])",
              "type": "method",
              "name": "setNoDelay",
              "desc": "<!--\nOnce a socket is assigned to this request and is connected\n[socket.setNoDelay()][] will be called.\n-->\n\n<p>このリクエストにソケットが割り当てられて接続した際に、\n[socket.setNoDelay()][] が呼び出されます。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "noDelay",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "request.setSocketKeepAlive([enable], [initialDelay])",
              "type": "method",
              "name": "setSocketKeepAlive",
              "desc": "<!--\nOnce a socket is assigned to this request and is connected\n[socket.setKeepAlive()][] will be called.\n-->\n\n<p>このリクエストにソケットが割り当てられて接続した際に、\n[socket.setKeepAlive()][] が呼び出されます。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "enable",
                      "optional": true
                    },
                    {
                      "name": "initialDelay",
                      "optional": true
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "HTTP"
    }
  ]
}
