{
  "source": "doc/api/console.markdown",
  "globals": [
    {
      "textRaw": "console",
      "name": "console",
      "stability": 4,
      "stabilityText": "API Frozen",
      "type": "global",
      "desc": "<!--\nFor printing to stdout and stderr.  Similar to the console object functions\nprovided by most web browsers, here the output is sent to stdout or stderr.\n-->\n\n<p>標準出力と標準エラーに出力するためのものです。\nほとんどのブラウザで提供されているコンソールオブジェクトと同様ですが、\n出力は標準出力か標準エラー出力に送られます。\n\n</p>\n<!--\nThe console functions are synchronous when the destination is a terminal or\na file (to avoid lost messages in case of premature exit) and asynchronous\nwhen it's a pipe (to avoid blocking for long periods of time).\n-->\n\n<p>コンソール関数は出力先がターミナルまたはファイルの場合は同期\n(早すぎる終了によりメッセージが失われるケースを防ぐため)、\nパイプの場合は非同期 (長時間ブロックすることを防ぐため) です。\n\n</p>\n<!--\nThat is, in the following example, stdout is non-blocking while stderr\nis blocking:\n-->\n\n<p>つまり、以下の例では標準出力はノンブロッキングですが、\n標準エラー出力はブロッキングです:\n\n</p>\n<pre><code>$ node script.js 2&gt; error.log | tee info.log</code></pre>\n<!--\nIn daily use, the blocking/non-blocking dichotomy is not something you\nshould worry about unless you log huge amounts of data.\n-->\n\n<p>通常の使用では、膨大な量のデータを記録するのではない限り、\nブロッキング／ノンブロッキングのどちらなのかを心配する必要はありません。\n\n\n</p>\n",
      "methods": [
        {
          "textRaw": "console.log([data], [...])",
          "type": "method",
          "name": "log",
          "desc": "<!--\nPrints to stdout with newline. This function can take multiple arguments in a\n`printf()`-like way. Example:\n-->\n\n<p>改行を伴って標準出力へプリントします。\nこの関数は <code>printf()</code> のように複数の引数を受け付けます。\n\n</p>\n<pre><code>console.log(&#39;count: %d&#39;, count);</code></pre>\n<!--\nIf formatting elements are not found in the first string then `util.inspect`\nis used on each argument.  See [util.format()][] for more information.\n-->\n\n<p>最初の引数文字列からフォーマット要素が見つからなかった場合は、\n<code>util.inspect</code> が各引数に使われます。\nより詳細は [util.format()][] を参照してください。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "data",
                  "optional": true
                },
                {
                  "name": "...",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "console.info([data], [...])",
          "type": "method",
          "name": "info",
          "desc": "<!--\nSame as `console.log`.\n-->\n\n<p><code>console.log</code> と同じです。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "data",
                  "optional": true
                },
                {
                  "name": "...",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "console.error([data], [...])",
          "type": "method",
          "name": "error",
          "desc": "<!--\nSame as `console.log` but prints to stderr.\n-->\n\n<p><code>console.log</code> と同様ですが、標準エラー出力にプリントします。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "data",
                  "optional": true
                },
                {
                  "name": "...",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "console.warn([data], [...])",
          "type": "method",
          "name": "warn",
          "desc": "<!--\nSame as `console.error`.\n-->\n\n<p><code>console.error()</code> と同じです。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "data",
                  "optional": true
                },
                {
                  "name": "...",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "console.dir(obj)",
          "type": "method",
          "name": "dir",
          "desc": "<!--\nUses `util.inspect` on `obj` and prints resulting string to stdout.\n-->\n\n<p><code>util.inspect</code> を使って <code>obj</code> を文字列化した結果を標準出力にプリントします。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "obj"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "console.time(label)",
          "type": "method",
          "name": "time",
          "desc": "<!--\nMark a time.\n-->\n\n<p>タイマを作成します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "label"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "console.timeEnd(label)",
          "type": "method",
          "name": "timeEnd",
          "desc": "<!--\nFinish timer, record output. Example:\n-->\n\n<p>タイマを終了し、結果を出力します。例:\n\n</p>\n<pre><code>console.time(&#39;100-elements&#39;);\nfor (var i = 0; i &lt; 100; i++) {\n  ;\n}\nconsole.timeEnd(&#39;100-elements&#39;);</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "label"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "console.trace(label)",
          "type": "method",
          "name": "trace",
          "desc": "<!--\nPrint a stack trace to stderr of the current position.\n-->\n\n<p>現在のスタックトレースを標準エラー出力にプリントします。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "label"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "console.assert(expression, [message])",
          "type": "method",
          "name": "assert",
          "desc": "<!--\nSame as [assert.ok()][] where if the `expression` evaluates as `false` throw an\nAssertionError with `message`.\n-->\n\n<p>[assert.ok()][] と同様に、もし <code>expression</code> が <code>false</code> に評価されると、\n<code>message</code> を持つ AssertionError がスローされます。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "expression"
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
