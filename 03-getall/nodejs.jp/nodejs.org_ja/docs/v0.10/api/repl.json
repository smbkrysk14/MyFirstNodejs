{
  "source": "doc/api/repl.markdown",
  "modules": [
    {
      "textRaw": "REPL",
      "name": "repl",
      "desc": "<!--\nA Read-Eval-Print-Loop (REPL) is available both as a standalone program and\neasily includable in other programs. The REPL provides a way to interactively\nrun JavaScript and see the results.  It can be used for debugging, testing, or\njust trying things out.\n-->\n\n<p>Read-Eval-Print-Loop (REPL) は単独のプログラムとしても他のプログラムに手軽に取り込む形でも利用することができます。\nREPL は対話的に JavaScript を実行して結果を確認する手段を提供します。 \nデバッグやテストやその他の様々なことを試す用途で利用されます。\n\n</p>\n<!--\nBy executing `node` without any arguments from the command-line you will be\ndropped into the REPL. It has simplistic emacs line-editing.\n-->\n\n<p>コマンドラインから <code>node</code> を引数無しで実行することで、REPL プログラムに入ります。\nREPL は Emacs 風の簡易な行編集機能を備えています。\n\n</p>\n<pre><code>mjr:~$ node\nType &#39;.help&#39; for options.\n&gt; a = [ 1, 2, 3];\n[ 1, 2, 3 ]\n&gt; a.forEach(function (v) {\n...   console.log(v);\n...   });\n1\n2\n3</code></pre>\n<p>より進んだ行編集を行うには、環境変数に <code>NODE_NO_READLINE=1</code>\nを設定してnodeを起動してください。\nこれによって main とデバッガ REPL を正規の端末設定で起動し、\n<code>rlwrap</code> を利用することができます。\n\n</p>\n<!--\nFor example, you could add this to your bashrc file:\n-->\n\n<p>例として、bashrc ファイルに以下のように設定を追加します:\n\n</p>\n<pre><code>alias node=&quot;env NODE_NO_READLINE=1 rlwrap node&quot;</code></pre>\n",
      "For advanced line-editors, start node with the environmental variable\n`NODE_NO_READLINE": "1`. This will start the main and debugger REPL in canonical\nterminal settings which will allow you to use with `rlwrap`.",
      "methods": [
        {
          "textRaw": "repl.start(options)",
          "type": "method",
          "name": "start",
          "desc": "<!--\nReturns and starts a `REPLServer` instance. Accepts an \"options\" Object that\ntakes the following values:\n-->\n<code>REPLServer</code> インスタンスを作成して返します。\n以下の値を含む &quot;options&quot; オブジェクトを受け取ります。\n\n<!--\n - `prompt` - the prompt and `stream` for all I/O. Defaults to `> `.\n\n - `input` - the readable stream to listen to. Defaults to `process.stdin`.\n\n - `output` - the writable stream to write readline data to. Defaults to\n   `process.stdout`.\n\n - `terminal` - pass `true` if the `stream` should be treated like a TTY, and\n   have ANSI/VT100 escape codes written to it. Defaults to checking `isTTY`\n   on the `output` stream upon instantiation.\n\n - `eval` - function that will be used to eval each given line. Defaults to\n   an async wrapper for `eval()`. See below for an example of a custom `eval`.\n\n - `useColors` - a boolean which specifies whether or not the `writer` function\n   should output colors. If a different `writer` function is set then this does\n   nothing. Defaults to the repl's `terminal` value.\n\n - `useGlobal` - if set to `true`, then the repl will use the `global` object,\n   instead of running scripts in a separate context. Defaults to `false`.\n\n - `ignoreUndefined` - if set to `true`, then the repl will not output the\n   return value of command if it's `undefined`. Defaults to `false`.\n\n - `writer` - the function to invoke for each command that gets evaluated which\n   returns the formatting (including coloring) to display. Defaults to\n   `util.inspect`.\n-->\n\n<ul>\n<li><p><code>prompt</code> - プロンプト。デフォルトは <code>&gt; </code> です。</p>\n</li>\n<li><p><code>input</code> - 監視する入力ストリーム。デフォルトは <code>process.stdin</code> です。</p>\n</li>\n<li><p><code>output</code> - 読み込んだデータを書き込む出力ストリーム。\nデフォルトは <code>process.stdout</code> です。</p>\n</li>\n<li><p><code>terminal</code> - もし <code>stream</code> が TTY で、ANSI/VT100 エスケープコードを\n出力するなら <code>true</code>。デフォルトはインスタンス作成時に <code>output</code>\nストリームを <code>isTTY</code> でチェックします。</p>\n</li>\n<li><p><code>eval</code> - 各行を評価するために使われる関数。デフォルトは <code>eval()</code> を\n非同期にラップした関数です。\n<code>eval</code> をカスタマイズする例は下記を参照してください。</p>\n</li>\n<li><p><code>useColors</code> - <code>write</code> 関数が色を付けるかどうかを指定するブーリアン値。\n<code>writer</code> に異なる関数が設定された場合、これは何もしません。\nデフォルトは repl の <code>terminal</code> の値です。</p>\n</li>\n<li><p><code>useGlobal</code> - もし <code>true</code> に設定されると、repl は独立したコンテキストを\n使う代わりに <code>global</code> オブジェクトを使用します。デフォルトは <code>false</code> です。</p>\n</li>\n<li><p><code>ignoreUndefined</code> - もし <code>true</code> に設定されると、repl はコマンドの戻り値が\n<code>undefined</code> だった場合にそれを出力しません。デフォルトは <code>false</code> です。</p>\n</li>\n<li><p><code>writer</code> - コマンドが評価されるごとに実行される関数で、表示するために\nフォーマット (色づけも含みます) して返します。\nデフォルトは <code>util.inspect</code> です。</p>\n</li>\n</ul>\n<!--\nYou can use your own `eval` function if it has following signature:\n-->\n\n<p>以下のシグネチャを持つ独自の <code>eval()</code> 関数を使うことができます。\n\n</p>\n<pre><code>function eval(cmd, context, filename, callback) {\n  callback(null, result);\n}</code></pre>\n<!--\nMultiple REPLs may be started against the same running instance of node.  Each\nwill share the same global object but will have unique I/O.\n-->\n\n<p>複数の REPL を起動した場合、同一の node インスタンスが実行されないことがあります。\nそれぞれの REPL はグローバルオブジェクトを共有しますが、I/O は固有のものを持ちます。\n\n</p>\n<!--\nHere is an example that starts a REPL on stdin, a Unix socket, and a TCP socket:\n-->\n\n<p>REPL を標準入力、Unix ドメインソケット、TCP ソケットのもとで起動する例を示します:\n\n</p>\n<pre><code>var net = require(&quot;net&quot;),\n    repl = require(&quot;repl&quot;);\n\nconnections = 0;\n\nrepl.start({\n  prompt: &quot;node via stdin&gt; &quot;,\n  input: process.stdin,\n  output: process.stdout\n});\n\nnet.createServer(function (socket) {\n  connections += 1;\n  repl.start({\n    prompt: &quot;node via Unix socket&gt; &quot;,\n    input: socket,\n    output: socket\n  }).on(&#39;exit&#39;, function() {\n    socket.end();\n  })\n}).listen(&quot;/tmp/node-repl-sock&quot;);\n\nnet.createServer(function (socket) {\n  connections += 1;\n  repl.start({\n    prompt: &quot;node via TCP socket&gt; &quot;,\n    input: socket,\n    output: socket\n  }).on(&#39;exit&#39;, function() {\n    socket.end();\n  });\n}).listen(5001);</code></pre>\n<!--\nRunning this program from the command line will start a REPL on stdin.  Other\nREPL clients may connect through the Unix socket or TCP socket. `telnet` is useful\nfor connecting to TCP sockets, and `socat` can be used to connect to both Unix and\nTCP sockets.\n-->\n\n<p>このプログラムをコマンドラインから実行すると、標準入力のもとで REPL が起動します。\n他の REPL クライアントは Unix ドメインソケットか TCP ソケットを介して接続することができます。\n<code>telnet</code> が TCP ソケットへの接続に便利です。\n<code>socat</code> は Unix ドメイン /TCP 両方のソケットへの接続に利用できます。\n\n</p>\n<!--\nBy starting a REPL from a Unix socket-based server instead of stdin, you can\nconnect to a long-running node process without restarting it.\n\nFor an example of running a \"full-featured\" (`terminal`) REPL over\na `net.Server` and `net.Socket` instance, see: https://gist.github.com/2209310\n\nFor an example of running a REPL instance over `curl(1)`,\nsee: https://gist.github.com/2053342\n-->\n\n<p>標準入力の代わりに Unix ドメインソケットをベースとしたサーバから REPL を起動することによって、\n再起動することなく node の常駐プロセスへ接続することができます。\n\n</p>\n<p><code>net.Server</code> および <code>net.Socket</code> インスタンス上の &quot;フル機能の&quot; (<code>terminal</code>)\nREPL を実行する例は、<a href="\"https://gist.github.com/2209310\"">https://gist.github.com/2209310</a> を参照してください。\n\n</p>\n<p><code>curl(1)</code> 上で REPL インスタンスを実行する例は、\n<a href="\"https://gist.github.com/2053342\"">https://gist.github.com/2053342</a> を参照してください。\n\n</p>\n",
          "events": [
            {
              "textRaw": "Event: 'exit'",
              "type": "event",
              "name": "exit",
              "desc": "<p><code>function () {}</code>\n\n</p>\n<!--\nEmitted when the user exits the REPL in any of the defined ways. Namely, typing\n`.exit` at the repl, pressing Ctrl+C twice to signal SIGINT, or pressing Ctrl+D\nto signal \"end\" on the `input` stream.\n-->\n\n<p>何らかの方法でユーザが REPL を終了した場合に生成されます。\nすなわち、repl で <code>.exit</code> をタイプする、Ctrl+C を 2 回推して\nSIGINT を生成する、あるいは Ctrl+D を推して <code>input</code> ストリームで <code>&#39;end&#39;</code> を\n知らせるなどです。\n\n</p>\n<!--\nExample of listening for `exit`:\n-->\n\n<p><code>&#39;exit&#39;</code> を監視する例:\n\n</p>\n<pre><code>r.on(&#39;exit&#39;, function () {\n  console.log(&#39;Got &quot;exit&quot; event from repl!&#39;);\n  process.exit();\n});</code></pre>\n",
              "params": []
            }
          ],
          "signatures": [
            {
              "params": [
                {
                  "name": "options"
                }
              ]
            }
          ]
        }
      ],
      "miscs": [
        {
          "textRaw": "REPL Features",
          "name": "REPL Features",
          "type": "misc",
          "desc": "<!--\nInside the REPL, Control+D will exit.  Multi-line expressions can be input.\nTab completion is supported for both global and local variables.\n-->\n\n<p>REPL の中で Control+D を実行すると終了します。複数行に渡る式を入力とすることができます。\n\n</p>\n<!--\nThe special variable `_` (underscore) contains the result of the last expression.\n-->\n\n<p>特別な変数である <code>_</code> (アンダースコア) は一番最後の式の結果を保持します。\n\n</p>\n<pre><code>&gt; [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ]\n[ &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ]\n&gt; _.length\n3\n&gt; _ += 1\n4</code></pre>\n<!--\nThe REPL provides access to any variables in the global scope. You can expose\na variable to the REPL explicitly by assigning it to the `context` object\nassociated with each `REPLServer`.  For example:\n-->\n\n<p>REPL はグローバルスコープに存在する全ての変数にアクセス可能です。\nそれぞれの <code>REPLServer</code> に紐づく <code>context</code> オブジェクトに変数を付与することで、\n明示的に変数を公開させることが可能です。 例:\n\n</p>\n<pre><code>// repl_test.js\nvar repl = require(&quot;repl&quot;),\n    msg = &quot;message&quot;;\n\nrepl.start(&quot;&gt; &quot;).context.m = msg;</code></pre>\n<!--\nThings in the `context` object appear as local within the REPL:\n-->\n\n<p><code>context</code> オブジェクトに設定された変数は、REPL の中ではローカルな変数として現れます:\n\n</p>\n<pre><code>mjr:~$ node repl_test.js\n&gt; m\n&#39;message&#39;</code></pre>\n<!--\nThere are a few special REPL commands:\n-->\n\n<p>特別な REPL コマンドがいくつかあります:\n\n</p>\n<!--\n  - `.break` - While inputting a multi-line expression, sometimes you get lost\n    or just don't care about completing it. `.break` will start over.\n  - `.clear` - Resets the `context` object to an empty object and clears any\n    multi-line expression.\n  - `.exit` - Close the I/O stream, which will cause the REPL to exit.\n  - `.help` - Show this list of special commands.\n  - `.save` - Save the current REPL session to a file\n    >.save ./file/to/save.js\n  - `.load` - Load a file into the current REPL session.\n    >.load ./file/to/load.js\n-->\n\n<ul>\n<li><code>.break</code> - 複数行に渡って式を入力している間に、途中で分からなくなったり完了させなくても良くなることがあります。<code>.break</code> で最初からやり直します。</li>\n<li><code>.clear</code> - <code>context</code> オブジェクトを空の状態にリセットし、複数行に入力している式をクリアします。</li>\n<li><code>.exit</code> - I/Oストリームを閉じ、REPLを終了させます。</li>\n<li><code>.help</code> - このコマンドの一覧を表示します。</li>\n<li><code>.save</code> - 現在の REPL セッションをファイルに保存します。<blockquote>\n<p>.save ./file/to/save.js</p>\n</blockquote>\n</li>\n<li><code>.load</code> - 現在の REPL セッションにファイルをロードします。<blockquote>\n<p>.load ./file/to/load.js</p>\n</blockquote>\n</li>\n</ul>\n<!--\nThe following key combinations in the REPL have these special effects:\n-->\n\n<p>REPL では、以下のキーコンビネーションは特別な効果を持ちます\n\n</p>\n<!--\n  - `<ctrl>C` - Similar to the `.break` keyword.  Terminates the current\n    command.  Press twice on a blank line to forcibly exit.\n  - `<ctrl>D` - Similar to the `.exit` keyword.\n-->\n\n<ul>\n<li><code>&lt;ctrl&gt;C</code> - <code>.break</code> キーワードと同様です。\n現在のコマンドを終了します。\n強制的に終了したければ空の行で 2 回押してください。</li>\n<li><code>&lt;ctrl&gt;D</code> - <code>.exit</code> キーワードと同様です。</li>\n</ul>\n"
        }
      ],
      "type": "module",
      "displayName": "REPL"
    }
  ]
}
