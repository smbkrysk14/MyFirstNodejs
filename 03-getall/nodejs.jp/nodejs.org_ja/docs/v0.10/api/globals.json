{
  "source": "doc/api/globals.markdown",
  "globals": [
    {
      "textRaw": "global",
      "name": "global",
      "type": "global",
      "desc": "<!--\n* {Object} The global namespace object.\n-->\n\n<ul>\n<li>{Object} グローバルなネームスペースのオブジェクト</li>\n</ul>\n<!--\nIn browsers, the top-level scope is the global scope. That means that in\nbrowsers if you're in the global scope `var something` will define a global\nvariable. In Node this is different. The top-level scope is not the global\nscope; `var something` inside a Node module will be local to that module.\n-->\n\n<p>ブラウザでは、トップレベルのスコープはグローバルスコープです。\nこれは、ブラウザではグローバルスコープで <code>var something</code> と定義するとグローバル変数になることを意味します。\nNode では異なります。\nトップレベルのスコープはグローバルスコープではありません;\nNode のモジュール内での <code>var something</code> はそのモジュールでローカルになります。\n\n</p>\n"
    },
    {
      "textRaw": "process",
      "name": "process",
      "type": "global",
      "desc": "<!--\nThe process object. See the [process object][] section.\n-->\n\n<p>プロセスオブジェクトです。[process オブジェクト][] の節を参照してください。\n\n</p>\n"
    },
    {
      "textRaw": "console",
      "name": "console",
      "type": "global",
      "desc": "<!--\nUsed to print to stdout and stderr. See the [console][] section.\n-->\n\n<p>標準出力および標準エラー出力へのプリントに使われます。\n[コンソール][] を参照してください。\n\n</p>\n"
    },
    {
      "textRaw": "Class: Buffer",
      "type": "global",
      "name": "Buffer",
      "desc": "<!--\nUsed to handle binary data. See the [buffer section][]\n-->\n\n<p>バイナリデータを扱うために使われます。\n[バッファセクション][] を参照してください。\n\n</p>\n"
    },
    {
      "textRaw": "clearInterval(t)",
      "type": "global",
      "name": "clearInterval",
      "desc": "<!--\nStop a timer that was previously created with `setInterval()`. The callback\nwill not execute.\n-->\n\n<p><code>setInterval()</code> によって以前に作成されたタイマを終了します。\nコールバックは実行されなくなります。\n\n</p>\n<!--\nThe timer functions are global variables. See the [timers][] section.\n-->\n\n<p>タイマー関数はグローバル変数です。[タイマー][] を参照してください。\n\n</p>\n<!--\n[buffer section]: buffer.html\n[module section]: modules.html\n[module system documentation]: modules.html\n[Modules]: modules.html#modules_modules\n[process object]: process.html#process_process\n[console]: console.html\n[timers]: timers.html\n-->\n\n"
    }
  ],
  "vars": [
    {
      "textRaw": "require()",
      "type": "var",
      "name": "require",
      "desc": "<!--\nTo require modules. See the [Modules][] section.  `require` isn't actually a\nglobal but rather local to each module.\n-->\n\n<p>require モジュールを指します。[モジュール][] の節を参照してください。\n<code>require</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n",
      "methods": [
        {
          "textRaw": "require.resolve()",
          "type": "method",
          "name": "resolve",
          "desc": "<!--\nUse the internal `require()` machinery to look up the location of a module,\nbut rather than loading the module, just return the resolved filename.\n-->\n\n<p><code>require()</code> の内部でモジュールの位置を検索するために使われます。\nモジュールのロードは行わず、ファイル名を解決して返すだけです。\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        }
      ],
      "properties": [
        {
          "textRaw": "`cache` {Object} ",
          "name": "cache",
          "desc": "<!--\nModules are cached in this object when they are required. By deleting a key\nvalue from this object, the next `require` will reload the module.\n-->\n\n<p>モジュールが要求されると、このオブジェクトの中にキャッシュされます。\nこのオブジェクトからキーと値を削除すると、次にそのモジュールが\n<code>require</code> されたときにリロードされます。\n\n</p>\n"
        },
        {
          "textRaw": "`extensions` {Object} ",
          "name": "extensions",
          "stability": 0,
          "stabilityText": "Deprecated",
          "desc": "<!--\nInstruct `require` on how to handle certain file extensions.\n\nProcess files with the extension `.sjs` as `.js`:\n-->\n\n<p><code>require</code> にファイル拡張子を扱う方法を教えます。\n\n</p>\n<p>拡張子が <code>.sjs</code> であるファイルの処理を <code>.js</code> と同じにするには:\n\n</p>\n<pre><code>require.extensions[&#39;.sjs&#39;] = require.extensions[&#39;.js&#39;];</code></pre>\n<!--\n**Deprecated**  In the past, this list has been used to load\nnon-JavaScript modules into Node by compiling them on-demand.\nHowever, in practice, there are much better ways to do this, such as\nloading modules via some other Node program, or compiling them to\nJavaScript ahead of time.\n-->\n\n<p><strong>廃止予定</strong> かつて、このリストは非 JavaScript モジュールを必要に応じて\nコンパイルし、Node にロードするために使われていました。\nしかし実際には、他の Node プログラムを通じてロードしたり、\n事前に JavaScript にコンパイルするなど、よりよい方法があります。\n\n</p>\n<!--\nSince the Module system is locked, this feature will probably never go\naway.  However, it may have subtle bugs and complexities that are best\nleft untouched.\n-->\n\n<p>モジュールシステムはロックされているので、この機能はおそらく\n無くならないでしょう。\nしかしながら、それは微妙なバグや複雑さがあってもそのまま放置されるでしょう。\n\n</p>\n"
        }
      ]
    },
    {
      "textRaw": "__filename",
      "name": "__filename",
      "type": "var",
      "desc": "<!--\nThe filename of the code being executed.  This is the resolved absolute path\nof this code file.  For a main program this is not necessarily the same\nfilename used in the command line.  The value inside a module is the path\nto that module file.\n-->\n\n<p>実行されているコードのファイル名です。これは解決された絶対パスです。\nメインプログラムでは、必ずしもコマンドライン引数で使われたファイル名と\n同じではありません。\nモジュールの中では、この値はそのモジュールファイルのパスとなります。\n\n</p>\n<!--\nExample: running `node example.js` from `/Users/mjr`\n-->\n\n<p>例: <code>node example.js</code> を <code>/Users/mjr</code> で実行する\n\n</p>\n<pre><code>console.log(__filename);\n// /Users/mjr/example.js</code></pre>\n<!--\n`__filename` isn't actually a global but rather local to each module.\n-->\n\n<p><code>__filename</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n"
    },
    {
      "textRaw": "__dirname",
      "name": "__dirname",
      "type": "var",
      "desc": "<!--\nThe name of the directory that the currently executing script resides in.\n-->\n\n<p>現在実行されているスクリプトが存在するディレクトリの名前です。\n\n</p>\n<!--\nExample: running `node example.js` from `/Users/mjr`\n-->\n\n<p>例: <code>node example.js</code> を <code>/Users/mjr</code> で実行する\n\n</p>\n<pre><code>console.log(__dirname);\n// /Users/mjr</code></pre>\n<!--\n`__dirname` isn't actually a global but rather local to each module.\n-->\n\n<p><code>__dirname</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n\n</p>\n"
    },
    {
      "textRaw": "module",
      "name": "module",
      "type": "var",
      "desc": "<!--\nA reference to the current module. In particular\n`module.exports` is used for defining what a module exports and makes\navailable through `require()`.\n-->\n\n<p>現在のモジュールへの参照です。\n<code>module.exports</code> は、モジュールが公開して <code>require()</code> を通じて利用可能になる\nものを定めるために使われます。\n\n</p>\n<!--\n`module` isn't actually a global but rather local to each module.\n-->\n\n<p><code>module</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n<!--\nSee the [module system documentation][] for more information.\n-->\n\n<p>より詳しくは [モジュールシステムのドキュメント][] を参照してください。\n\n</p>\n"
    },
    {
      "textRaw": "exports",
      "name": "exports",
      "type": "var",
      "desc": "<!--\nA reference to the `module.exports` that is shorter to type.\nSee [module system documentation][] for details on when to use `exports` and\nwhen to use `module.exports`.\n-->\n\n<p><code>module.exports</code> への参照です。\nいつ <code>exports</code> を使い、いつ <code>module.exports</code> を使うかの詳細は\n[モジュールシステムのドキュメント][] を参照してください。\n\n</p>\n<!--\n`exports` isn't actually a global but rather local to each module.\n-->\n\n<p><code>exports</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n<!--\nSee the [module system documentation][] for more information.\n\nSee the [module section][] for more information.\n-->\n\n<p>より詳しくは [モジュール][] を参照してください。\n\n</p>\n"
    }
  ],
  "methods": [
    {
      "textRaw": "setTimeout(cb, ms)",
      "type": "method",
      "name": "setTimeout",
      "desc": "<!--\nRun callback `cb` after *at least* `ms` milliseconds. The actual delay depends\non external factors like OS timer granularity and system load.\n-->\n\n<p><em>少なくとも</em> <code>ms</code> ミリ秒が経過した後、コールバック <code>cb</code> を実行します。\n実際の遅延は OS のタイマ分解能やシステムの負荷など外部要因に依存します。\n\n</p>\n<!--\nThe timeout must be in the range of 1-2,147,483,647 inclusive. If the value is\noutside that range, it's changed to 1 millisecond. Broadly speaking, a timer\ncannot span more than 24.8 days.\n-->\n\n<p>タイムアウト値は 1～2,147,483,647 の範囲内でなければなりません。\nもし値がこの範囲外だった場合は 1 ミリ秒となります。\n大雑把に言って、タイマは 24.8 日を越えることはできません。\n\n</p>\n<!--\nReturns an opaque value that represents the timer.\n-->\n\n<p>タイマを表現する不透明な値を返します。\n\n</p>\n",
      "signatures": [
        {
          "params": [
            {
              "name": "cb"
            },
            {
              "name": "ms"
            }
          ]
        }
      ]
    },
    {
      "textRaw": "clearTimeout(t)",
      "type": "method",
      "name": "clearTimeout",
      "desc": "<!--\nStop a timer that was previously created with `setTimeout()`. The callback will\nnot execute.\n-->\n\n<p><code>setTimeout()</code> によって以前に作成されたタイマを終了します。\nコールバックは実行されなくなります。\n\n</p>\n",
      "signatures": [
        {
          "params": [
            {
              "name": "t"
            }
          ]
        }
      ]
    },
    {
      "textRaw": "setInterval(cb, ms)",
      "type": "method",
      "name": "setInterval",
      "desc": "<!--\nRun callback `cb` repeatedly every `ms` milliseconds. Note that the actual\ninterval may vary, depending on external factors like OS timer granularity and\nsystem load. It's never less than `ms` but it may be longer.\n-->\n\n<p><code>ms</code> ミリ秒ごとにコールバック <code>cb</code> を繰り返し実行します。\nOS のタイマ分解能やシステムの負荷など外部要因によって、\n実際のインターバルが異なるかもしれないことに注意してください。\nそれは決して <code>ms</code> より短いことはありませんが、より長いことがあります。\n\n</p>\n<!--\nThe interval must be in the range of 1-2,147,483,647 inclusive. If the value is\noutside that range, it's changed to 1 millisecond. Broadly speaking, a timer\ncannot span more than 24.8 days.\n-->\n\n<p>インターバル値は 1～2,147,483,647 の範囲内でなければなりません。\nもし値がこの範囲外だった場合は 1 ミリ秒となります。\n大雑把に言って、タイマは 24.8 日を越えることはできません。\n\n</p>\n<!--\nReturns an opaque value that represents the timer.\n-->\n\n<p>タイマを表現する不透明な値を返します。\n\n</p>\n",
      "signatures": [
        {
          "params": [
            {
              "name": "cb"
            },
            {
              "name": "ms"
            }
          ]
        }
      ]
    }
  ],
  "miscs": [
    {
      "textRaw": "Global Objects",
      "name": "Global Objects",
      "type": "misc",
      "desc": "<!--\nThese objects are available in all modules. Some of these objects aren't\nactually in the global scope but in the module scope - this will be noted.\n-->\n\n<p>これらのオブジェクトは全てのモジュールで有効です。\nこれらのオブジェクトのいくつかは実際はグローバルスコープではなくモジュールスコープです - 注意してください。\n\n</p>\n",
      "globals": [
        {
          "textRaw": "global",
          "name": "global",
          "type": "global",
          "desc": "<!--\n* {Object} The global namespace object.\n-->\n\n<ul>\n<li>{Object} グローバルなネームスペースのオブジェクト</li>\n</ul>\n<!--\nIn browsers, the top-level scope is the global scope. That means that in\nbrowsers if you're in the global scope `var something` will define a global\nvariable. In Node this is different. The top-level scope is not the global\nscope; `var something` inside a Node module will be local to that module.\n-->\n\n<p>ブラウザでは、トップレベルのスコープはグローバルスコープです。\nこれは、ブラウザではグローバルスコープで <code>var something</code> と定義するとグローバル変数になることを意味します。\nNode では異なります。\nトップレベルのスコープはグローバルスコープではありません;\nNode のモジュール内での <code>var something</code> はそのモジュールでローカルになります。\n\n</p>\n"
        },
        {
          "textRaw": "process",
          "name": "process",
          "type": "global",
          "desc": "<!--\nThe process object. See the [process object][] section.\n-->\n\n<p>プロセスオブジェクトです。[process オブジェクト][] の節を参照してください。\n\n</p>\n"
        },
        {
          "textRaw": "console",
          "name": "console",
          "type": "global",
          "desc": "<!--\nUsed to print to stdout and stderr. See the [console][] section.\n-->\n\n<p>標準出力および標準エラー出力へのプリントに使われます。\n[コンソール][] を参照してください。\n\n</p>\n"
        },
        {
          "textRaw": "Class: Buffer",
          "type": "global",
          "name": "Buffer",
          "desc": "<!--\nUsed to handle binary data. See the [buffer section][]\n-->\n\n<p>バイナリデータを扱うために使われます。\n[バッファセクション][] を参照してください。\n\n</p>\n"
        },
        {
          "textRaw": "clearInterval(t)",
          "type": "global",
          "name": "clearInterval",
          "desc": "<!--\nStop a timer that was previously created with `setInterval()`. The callback\nwill not execute.\n-->\n\n<p><code>setInterval()</code> によって以前に作成されたタイマを終了します。\nコールバックは実行されなくなります。\n\n</p>\n<!--\nThe timer functions are global variables. See the [timers][] section.\n-->\n\n<p>タイマー関数はグローバル変数です。[タイマー][] を参照してください。\n\n</p>\n<!--\n[buffer section]: buffer.html\n[module section]: modules.html\n[module system documentation]: modules.html\n[Modules]: modules.html#modules_modules\n[process object]: process.html#process_process\n[console]: console.html\n[timers]: timers.html\n-->\n\n"
        }
      ],
      "vars": [
        {
          "textRaw": "require()",
          "type": "var",
          "name": "require",
          "desc": "<!--\nTo require modules. See the [Modules][] section.  `require` isn't actually a\nglobal but rather local to each module.\n-->\n\n<p>require モジュールを指します。[モジュール][] の節を参照してください。\n<code>require</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n",
          "methods": [
            {
              "textRaw": "require.resolve()",
              "type": "method",
              "name": "resolve",
              "desc": "<!--\nUse the internal `require()` machinery to look up the location of a module,\nbut rather than loading the module, just return the resolved filename.\n-->\n\n<p><code>require()</code> の内部でモジュールの位置を検索するために使われます。\nモジュールのロードは行わず、ファイル名を解決して返すだけです。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ],
          "properties": [
            {
              "textRaw": "`cache` {Object} ",
              "name": "cache",
              "desc": "<!--\nModules are cached in this object when they are required. By deleting a key\nvalue from this object, the next `require` will reload the module.\n-->\n\n<p>モジュールが要求されると、このオブジェクトの中にキャッシュされます。\nこのオブジェクトからキーと値を削除すると、次にそのモジュールが\n<code>require</code> されたときにリロードされます。\n\n</p>\n"
            },
            {
              "textRaw": "`extensions` {Object} ",
              "name": "extensions",
              "stability": 0,
              "stabilityText": "Deprecated",
              "desc": "<!--\nInstruct `require` on how to handle certain file extensions.\n\nProcess files with the extension `.sjs` as `.js`:\n-->\n\n<p><code>require</code> にファイル拡張子を扱う方法を教えます。\n\n</p>\n<p>拡張子が <code>.sjs</code> であるファイルの処理を <code>.js</code> と同じにするには:\n\n</p>\n<pre><code>require.extensions[&#39;.sjs&#39;] = require.extensions[&#39;.js&#39;];</code></pre>\n<!--\n**Deprecated**  In the past, this list has been used to load\nnon-JavaScript modules into Node by compiling them on-demand.\nHowever, in practice, there are much better ways to do this, such as\nloading modules via some other Node program, or compiling them to\nJavaScript ahead of time.\n-->\n\n<p><strong>廃止予定</strong> かつて、このリストは非 JavaScript モジュールを必要に応じて\nコンパイルし、Node にロードするために使われていました。\nしかし実際には、他の Node プログラムを通じてロードしたり、\n事前に JavaScript にコンパイルするなど、よりよい方法があります。\n\n</p>\n<!--\nSince the Module system is locked, this feature will probably never go\naway.  However, it may have subtle bugs and complexities that are best\nleft untouched.\n-->\n\n<p>モジュールシステムはロックされているので、この機能はおそらく\n無くならないでしょう。\nしかしながら、それは微妙なバグや複雑さがあってもそのまま放置されるでしょう。\n\n</p>\n"
            }
          ]
        },
        {
          "textRaw": "__filename",
          "name": "__filename",
          "type": "var",
          "desc": "<!--\nThe filename of the code being executed.  This is the resolved absolute path\nof this code file.  For a main program this is not necessarily the same\nfilename used in the command line.  The value inside a module is the path\nto that module file.\n-->\n\n<p>実行されているコードのファイル名です。これは解決された絶対パスです。\nメインプログラムでは、必ずしもコマンドライン引数で使われたファイル名と\n同じではありません。\nモジュールの中では、この値はそのモジュールファイルのパスとなります。\n\n</p>\n<!--\nExample: running `node example.js` from `/Users/mjr`\n-->\n\n<p>例: <code>node example.js</code> を <code>/Users/mjr</code> で実行する\n\n</p>\n<pre><code>console.log(__filename);\n// /Users/mjr/example.js</code></pre>\n<!--\n`__filename` isn't actually a global but rather local to each module.\n-->\n\n<p><code>__filename</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n"
        },
        {
          "textRaw": "__dirname",
          "name": "__dirname",
          "type": "var",
          "desc": "<!--\nThe name of the directory that the currently executing script resides in.\n-->\n\n<p>現在実行されているスクリプトが存在するディレクトリの名前です。\n\n</p>\n<!--\nExample: running `node example.js` from `/Users/mjr`\n-->\n\n<p>例: <code>node example.js</code> を <code>/Users/mjr</code> で実行する\n\n</p>\n<pre><code>console.log(__dirname);\n// /Users/mjr</code></pre>\n<!--\n`__dirname` isn't actually a global but rather local to each module.\n-->\n\n<p><code>__dirname</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n\n</p>\n"
        },
        {
          "textRaw": "module",
          "name": "module",
          "type": "var",
          "desc": "<!--\nA reference to the current module. In particular\n`module.exports` is used for defining what a module exports and makes\navailable through `require()`.\n-->\n\n<p>現在のモジュールへの参照です。\n<code>module.exports</code> は、モジュールが公開して <code>require()</code> を通じて利用可能になる\nものを定めるために使われます。\n\n</p>\n<!--\n`module` isn't actually a global but rather local to each module.\n-->\n\n<p><code>module</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n<!--\nSee the [module system documentation][] for more information.\n-->\n\n<p>より詳しくは [モジュールシステムのドキュメント][] を参照してください。\n\n</p>\n"
        },
        {
          "textRaw": "exports",
          "name": "exports",
          "type": "var",
          "desc": "<!--\nA reference to the `module.exports` that is shorter to type.\nSee [module system documentation][] for details on when to use `exports` and\nwhen to use `module.exports`.\n-->\n\n<p><code>module.exports</code> への参照です。\nいつ <code>exports</code> を使い、いつ <code>module.exports</code> を使うかの詳細は\n[モジュールシステムのドキュメント][] を参照してください。\n\n</p>\n<!--\n`exports` isn't actually a global but rather local to each module.\n-->\n\n<p><code>exports</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n<!--\nSee the [module system documentation][] for more information.\n\nSee the [module section][] for more information.\n-->\n\n<p>より詳しくは [モジュール][] を参照してください。\n\n</p>\n"
        }
      ],
      "methods": [
        {
          "textRaw": "setTimeout(cb, ms)",
          "type": "method",
          "name": "setTimeout",
          "desc": "<!--\nRun callback `cb` after *at least* `ms` milliseconds. The actual delay depends\non external factors like OS timer granularity and system load.\n-->\n\n<p><em>少なくとも</em> <code>ms</code> ミリ秒が経過した後、コールバック <code>cb</code> を実行します。\n実際の遅延は OS のタイマ分解能やシステムの負荷など外部要因に依存します。\n\n</p>\n<!--\nThe timeout must be in the range of 1-2,147,483,647 inclusive. If the value is\noutside that range, it's changed to 1 millisecond. Broadly speaking, a timer\ncannot span more than 24.8 days.\n-->\n\n<p>タイムアウト値は 1～2,147,483,647 の範囲内でなければなりません。\nもし値がこの範囲外だった場合は 1 ミリ秒となります。\n大雑把に言って、タイマは 24.8 日を越えることはできません。\n\n</p>\n<!--\nReturns an opaque value that represents the timer.\n-->\n\n<p>タイマを表現する不透明な値を返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "cb"
                },
                {
                  "name": "ms"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "clearTimeout(t)",
          "type": "method",
          "name": "clearTimeout",
          "desc": "<!--\nStop a timer that was previously created with `setTimeout()`. The callback will\nnot execute.\n-->\n\n<p><code>setTimeout()</code> によって以前に作成されたタイマを終了します。\nコールバックは実行されなくなります。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "t"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "setInterval(cb, ms)",
          "type": "method",
          "name": "setInterval",
          "desc": "<!--\nRun callback `cb` repeatedly every `ms` milliseconds. Note that the actual\ninterval may vary, depending on external factors like OS timer granularity and\nsystem load. It's never less than `ms` but it may be longer.\n-->\n\n<p><code>ms</code> ミリ秒ごとにコールバック <code>cb</code> を繰り返し実行します。\nOS のタイマ分解能やシステムの負荷など外部要因によって、\n実際のインターバルが異なるかもしれないことに注意してください。\nそれは決して <code>ms</code> より短いことはありませんが、より長いことがあります。\n\n</p>\n<!--\nThe interval must be in the range of 1-2,147,483,647 inclusive. If the value is\noutside that range, it's changed to 1 millisecond. Broadly speaking, a timer\ncannot span more than 24.8 days.\n-->\n\n<p>インターバル値は 1～2,147,483,647 の範囲内でなければなりません。\nもし値がこの範囲外だった場合は 1 ミリ秒となります。\n大雑把に言って、タイマは 24.8 日を越えることはできません。\n\n</p>\n<!--\nReturns an opaque value that represents the timer.\n-->\n\n<p>タイマを表現する不透明な値を返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "cb"
                },
                {
                  "name": "ms"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
